.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::GUID 3"
.TH Data::GUID 3 "2011-01-18" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::GUID \- globally unique identifiers
.SH "VERSION"
.IX Header "VERSION"
version 0.046
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::GUID;
\&
\&  my $guid = Data::GUID\->new;
\&
\&  my $string = $guid\->as_string; # or "$guid"
\&
\&  my $other_guid = Data::GUID\->from_string($string);
\&
\&  if (($guid <=> $other_guid) == 0) {
\&    print "They\*(Aqre the same!\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Data::GUID provides a simple interface for generating and using globally unique
identifiers.
.SH "GETTING A NEW GUID"
.IX Header "GETTING A NEW GUID"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $guid = Data::GUID\->new;
.Ve
.PP
This method returns a new globally unique identifier.
.SH "GUIDS FROM EXISTING VALUES"
.IX Header "GUIDS FROM EXISTING VALUES"
These method returns a new Data::GUID object for the given \s-1GUID\s0 value.  In all
cases, these methods throw an exception if given invalid input.
.SS "from_string"
.IX Subsection "from_string"
.Vb 1
\&  my $guid = Data::GUID\->from_string("B0470602\-A64B\-11DA\-8632\-93EBF1C0E05A");
.Ve
.SS "from_hex"
.IX Subsection "from_hex"
.Vb 2
\&  # note that a hex guid is a guid string without hyphens and with a leading 0x
\&  my $guid = Data::GUID\->from_hex("0xB0470602A64B11DA863293EBF1C0E05A");
.Ve
.SS "from_base64"
.IX Subsection "from_base64"
.Vb 1
\&  my $guid = Data::GUID\->from_base64("sEcGAqZLEdqGMpPr8cDgWg==");
.Ve
.SS "from_data_uuid"
.IX Subsection "from_data_uuid"
This method returns a new Data::GUID object if given a Data::UUID value.
Because Data::UUID values are not blessed and because Data::UUID provides no
validation method, this method will only throw an exception if the given data
is of the wrong size.
.SH "IDENTIFYING GUIDS"
.IX Header "IDENTIFYING GUIDS"
.SS "string_guid_regex"
.IX Subsection "string_guid_regex"
.SS "hex_guid_regex"
.IX Subsection "hex_guid_regex"
.SS "base64_guid_regex"
.IX Subsection "base64_guid_regex"
These methods return regex objects that match regex strings of the appropriate
type.
.SS "from_any_string"
.IX Subsection "from_any_string"
.Vb 1
\&  my $string = get_string_from_ether;
\&
\&  my $guid = Data::GUID\->from_any_string($string);
.Ve
.PP
This method returns a Data::GUID object for the given string, trying all known
string interpretations.  An exception is thrown if the value is not a valid
\&\s-1GUID\s0 string.
.SS "best_guess"
.IX Subsection "best_guess"
.Vb 1
\&  my $value = get_value_from_ether;
\&
\&  my $guid = Data::GUID\->best_guess($value);
.Ve
.PP
This method returns a Data::GUID object for the given value, trying everything
it can.  It works like \f(CW"from_any_string"\fR, but will also accept Data::UUID
values.  (In effect, this means that any sixteen byte value is acceptable.)
.SH "GUIDS INTO STRINGS"
.IX Header "GUIDS INTO STRINGS"
These methods return various string representations of a \s-1GUID\s0.
.SS "as_string"
.IX Subsection "as_string"
This method returns a \*(L"traditional\*(R" \s-1GUID/UUID\s0 string representation.  This is
five hexadecimal strings, delimited by hyphens.  For example:
.PP
.Vb 1
\&  B0470602\-A64B\-11DA\-8632\-93EBF1C0E05A
.Ve
.PP
This method is also used to stringify Data::GUID objects.
.SS "as_hex"
.IX Subsection "as_hex"
This method returns a plain hexadecimal representation of the \s-1GUID\s0, with a
leading \f(CW\*(C`0x\*(C'\fR.  For example:
.PP
.Vb 1
\&  0xB0470602A64B11DA863293EBF1C0E05A
.Ve
.SS "as_base64"
.IX Subsection "as_base64"
This method returns a base\-64 string representation of the \s-1GUID\s0.  For example:
.PP
.Vb 1
\&  sEcGAqZLEdqGMpPr8cDgWg==
.Ve
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.SS "compare_to_guid"
.IX Subsection "compare_to_guid"
This method compares a \s-1GUID\s0 to another \s-1GUID\s0 and returns \-1, 0, or 1, as do
other comparison routines.
.SS "as_binary"
.IX Subsection "as_binary"
This method returns the packed binary representation of the \s-1GUID\s0.  At present
this method relies on Data::GUID's underlying use of Data::UUID.  It is not
guaranteed to continue to work the same way, or at all.  \fICaveat invocator\fR.
.SH "IMPORTING"
.IX Header "IMPORTING"
Data::GUID does not export any subroutines by default, but it provides a few
routines which will be imported on request.  These routines may be called as
class methods, or may be imported to be called as subroutines.  Calling them by
fully qualified name is incorrect.
.PP
.Vb 1
\&  use Data::GUID qw(guid);
\&
\&  my $guid = guid;             # OK
\&  my $guid = Data::GUID\->guid; # OK
\&  my $guid = Data::GUID::guid; # NOT OK
.Ve
.SS "guid"
.IX Subsection "guid"
This routine returns a new Data::GUID object.
.SS "guid_string"
.IX Subsection "guid_string"
This returns the string representation of a new \s-1GUID\s0.
.SS "guid_hex"
.IX Subsection "guid_hex"
This returns the hex representation of a new \s-1GUID\s0.
.SS "guid_base64"
.IX Subsection "guid_base64"
This returns the base64 representation of a new \s-1GUID\s0.
.SS "guid_from_anything"
.IX Subsection "guid_from_anything"
This returns the result of calling the \f(CW"from_any_string"\fR method.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
add namespace support
.IP "\(bu" 4
remove dependency on wretched Data::UUID
.IP "\(bu" 4
make it work on 5.005
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0, \f(CW\*(C`<rjbs@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-data\-guid@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.  I will be notified, and then you'll automatically be
notified of progress on your bug as I make changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 Ricardo Signes, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
