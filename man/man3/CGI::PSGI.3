.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::PSGI 3"
.TH CGI::PSGI 3 "2011-05-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::PSGI \- Adapt CGI.pm to the PSGI protocol
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use CGI::PSGI;
\&
\&  my $app = sub {
\&      my $env = shift;
\&      my $q = CGI::PSGI\->new($env);
\&      return [ $q\->psgi_header, [ $body ] ];
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is for web application framework developers who currently uses
\&\s-1CGI\s0 to handle query parameters, and would like for the frameworks to comply
with the \s-1PSGI\s0 protocol.
.PP
Only slight modifications should be required if the framework is already
collecting the body content to print to \s-1STDOUT\s0 at one place (rather using
the print-as-you-go approach).
.PP
On the other hand, if you are an \*(L"end user\*(R" of \s-1CGI\s0.pm and have a \s-1CGI\s0 script
that you want to run under \s-1PSGI\s0 web servers, this module might not be what you
want.  Take a look at CGI::Emulate::PSGI instead.
.PP
Your application, typically the web application framework adapter
should update the code to do \f(CW\*(C`CGI::PSGI\->new($env)\*(C'\fR instead of
\&\f(CW\*(C`CGI\->new\*(C'\fR to create a new \s-1CGI\s0 object. (This is similar to how
CGI::Fast object is initialized in a FastCGI environment.)
.SH "INTERFACES SUPPORTED"
.IX Header "INTERFACES SUPPORTED"
Only the object-oriented interface of \s-1CGI\s0.pm is supported through \s-1CGI::PSGI\s0.
This means you should always create an object with \f(CW\*(C`CGI::PSGI\->new($env)\*(C'\fR
and should call methods on the object.
.PP
The function-based interface like \f(CW\*(C`use CGI \*(Aq:standard\*(Aq\*(C'\fR does not work with this module.
.SH "METHODS"
.IX Header "METHODS"
\&\s-1CGI::PSGI\s0 adds the following extra methods to \s-1CGI\s0.pm:
.SS "env"
.IX Subsection "env"
.Vb 1
\&  $env = $cgi\->env;
.Ve
.PP
Returns the \s-1PSGI\s0 environment in a hash reference. This allows \s-1CGI\s0.pm\-based
application frameworks such as CGI::Application to access \s-1PSGI\s0 extensions,
typically set by Plack Middleware components.
.PP
So if you enable Plack::Middleware::Session, your application and
plugin developers can access the session via:
.PP
.Vb 1
\&  $cgi\->env\->{\*(Aqplack.session\*(Aq}\->get("foo");
.Ve
.PP
Of course this should be coded carefully by checking the existence of
\&\f(CW\*(C`env\*(C'\fR method as well as the hash key \f(CW\*(C`plack.session\*(C'\fR.
.SS "psgi_header"
.IX Subsection "psgi_header"
.Vb 1
\& my ($status_code, $headers_aref) = $cgi\->psgi_header(%args);
.Ve
.PP
Works like \s-1CGI\s0.pm's \fIheader()\fR, but the return format is modified. It returns
an array with the status code and arrayref of header pairs that \s-1PSGI\s0
requires.
.PP
If your application doesn't use \f(CW\*(C`$cgi\->header\*(C'\fR, you can ignore this
method and generate the status code and headers arrayref another way.
.SS "psgi_redirect"
.IX Subsection "psgi_redirect"
.Vb 1
\& my ($status_code, $headers_aref) = $cgi\->psgi_redirect(%args);
.Ve
.PP
Works like \s-1CGI\s0.pm's \fIredirect()\fR, but the return format is modified. It
returns an array with the status code and arrayref of header pairs that \s-1PSGI\s0
requires.
.PP
If your application doesn't use \f(CW\*(C`$cgi\->redirect\*(C'\fR, you can ignore this
method and generate the status code and headers arrayref another way.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Do not use CGI::Pretty or something similar in your controller. The
module messes up \s-1CGI\s0's \s-1DIY\s0 autoloader and breaks \s-1CGI::PSGI\s0 (and
potentially other) inheritance.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa <miyagawa@bulknews.net>
.PP
Mark Stosberg <mark@summersault.com>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1CGI\s0, CGI::Emulate::PSGI
