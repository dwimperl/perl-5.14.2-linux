.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Tiny 3"
.TH Config::Tiny 3 "2011-03-24" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Tiny \- Read/Write .ini style files with as little code as possible
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # In your configuration file
\&    rootproperty=blah
\&
\&    [section]
\&    one=twp
\&    three= four
\&    Foo =Bar
\&    empty=
\&
\&    # In your program
\&    use Config::Tiny;
\&
\&    # Create a config
\&    my $Config = Config::Tiny\->new;
\&
\&    # Open the config
\&    $Config = Config::Tiny\->read( \*(Aqfile.conf\*(Aq );
\&
\&    # Reading properties
\&    my $rootproperty = $Config\->{_}\->{rootproperty};
\&    my $one = $Config\->{section}\->{one};
\&    my $Foo = $Config\->{section}\->{Foo};
\&
\&    # Changing data
\&    $Config\->{newsection} = { this => \*(Aqthat\*(Aq }; # Add a section
\&    $Config\->{section}\->{Foo} = \*(AqNot Bar!\*(Aq;     # Change a value
\&    delete $Config\->{_};                        # Delete a value or section
\&
\&    # Save a config
\&    $Config\->write( \*(Aqfile.conf\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Config::Tiny\*(C'\fR is a perl class to read and write .ini style configuration
files with as little code as possible, reducing load time and memory
overhead. Most of the time it is accepted that Perl applications use a lot
of memory and modules. The \f(CW\*(C`::Tiny\*(C'\fR family of modules is specifically
intended to provide an ultralight alternative to the standard modules.
.PP
This module is primarily for reading human written files, and anything we
write shouldn't need to have documentation/comments. If you need something
with more power move up to Config::Simple, Config::General or one of
the many other \f(CW\*(C`Config::\*(C'\fR modules. To rephrase, Config::Tiny does \fBnot\fR
preserve your comments, whitespace, or the order of your config file.
.SH "CONFIGURATION FILE SYNTAX"
.IX Header "CONFIGURATION FILE SYNTAX"
Files are the same format as for windows .ini files. For example:
.PP
.Vb 3
\&        [section]
\&        var1=value1
\&        var2=value2
.Ve
.PP
If a property is outside of a section at the beginning of a file, it will
be assigned to the \f(CW"root section"\fR, available at \f(CW\*(C`$Config\->{_}\*(C'\fR.
.PP
Lines starting with \f(CW\*(Aq#\*(Aq\fR or \f(CW\*(Aq;\*(Aq\fR are considered comments and ignored,
as are blank lines.
.PP
When writing back to the config file, all comments, custom whitespace,
and the ordering of your config file elements is discarded. If you need
to keep the human elements of a config when writing back, upgrade to
something better, this module is not for you.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
The constructor \f(CW\*(C`new\*(C'\fR creates and returns an empty \f(CW\*(C`Config::Tiny\*(C'\fR object.
.ie n .SS "read $filename"
.el .SS "read \f(CW$filename\fP"
.IX Subsection "read $filename"
The \f(CW\*(C`read\*(C'\fR constructor reads a config file, and returns a new
\&\f(CW\*(C`Config::Tiny\*(C'\fR object containing the properties in the file.
.PP
Returns the object on success, or \f(CW\*(C`undef\*(C'\fR on error.
.PP
When \f(CW\*(C`read\*(C'\fR fails, \f(CW\*(C`Config::Tiny\*(C'\fR sets an error message internally
you can recover via \f(CW\*(C`Config::Tiny\->errstr\*(C'\fR. Although in \fBsome\fR
cases a failed \f(CW\*(C`read\*(C'\fR will also set the operating system error
variable \f(CW$!\fR, not all errors do and you should not rely on using
the \f(CW$!\fR variable.
.ie n .SS "read_string $string;"
.el .SS "read_string \f(CW$string\fP;"
.IX Subsection "read_string $string;"
The \f(CW\*(C`read_string\*(C'\fR method takes as argument the contents of a config file
as a string and returns the \f(CW\*(C`Config::Tiny\*(C'\fR object for it.
.ie n .SS "write $filename"
.el .SS "write \f(CW$filename\fP"
.IX Subsection "write $filename"
The \f(CW\*(C`write\*(C'\fR method generates the file content for the properties, and
writes it to disk to the filename specified.
.PP
Returns true on success or \f(CW\*(C`undef\*(C'\fR on error.
.SS "write_string"
.IX Subsection "write_string"
Generates the file content for the object and returns it as a string.
.SS "errstr"
.IX Subsection "errstr"
When an error occurs, you can retrieve the error message either from the
\&\f(CW$Config::Tiny::errstr\fR variable, or using the \f(CW\*(C`errstr()\*(C'\fR method.
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "Unsupported Section Headers"
.IX Subsection "Unsupported Section Headers"
Some edge cases in section headers are not support, and additionally may not
be detected when writing the config file.
.PP
Specifically, section headers with leading whitespace, trailing whitespace,
or newlines anywhere in the section header, will not be written correctly
to the file and may cause file corruption.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Config\-Tiny <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Config-Tiny>
.PP
For other issues, or commercial enhancement or support, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "ACKNOWLEGEMENTS"
.IX Header "ACKNOWLEGEMENTS"
Thanks to Sherzod Ruzmetov <sherzodr@cpan.org> for
Config::Simple, which inspired this module by being not quite
\&\*(L"simple\*(R" enough for me :)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::Simple, Config::General, ali.as
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
