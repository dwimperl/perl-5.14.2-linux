.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5134DELTA 1"
.TH PERL5134DELTA 1 "2011-09-26" "perl v5.14.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5134delta \- what is new for perl v5.13.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.13.4 release and
the 5.13.3 release.
.PP
If you are upgrading from an earlier release such as 5.13.2, first read
perl5133delta, which describes differences between 5.13.2 and
5.13.3.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """srand()"" now returns the seed"
.el .SS "\f(CWsrand()\fP now returns the seed"
.IX Subsection "srand() now returns the seed"
This allows programs that need to have repeatable results to not have to come
up with their own seed generating mechanism.  Instead, they can use \f(CW\*(C`srand()\*(C'\fR
and somehow stash the return for future use.  Typical is a test program which
has too many combinations to test comprehensively in the time available to it
each run.  It can test a random subset each time, and should there be a failure,
log the seed used for that run so that it can later be used to reproduce the
exact results.
.ie n .SS """\eN{\fIname\fP}"" and ""charnames"" enhancements"
.el .SS "\f(CW\eN{\fP\f(CIname\fP\f(CW}\fP and \f(CWcharnames\fP enhancements"
.IX Subsection "N{name} and charnames enhancements"
\&\f(CW\*(C`\eN{}\*(C'\fR, \f(CW\*(C`charnames::vianame\*(C'\fR, \f(CW\*(C`charnames::viacode\*(C'\fR now know about every
character in Unicode.  Previously, they didn't know about the Hangul syllables
nor a number of \s-1CJK\s0 (Chinese/Japanese/Korean) characters.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Declare \s-1API\s0 incompatibility between blead releases"
.IX Subsection "Declare API incompatibility between blead releases"
Only stable releases (5.10.x, 5.12.x, 5.14.x, ...) guarantee binary
compatibility with each other, while blead releases (5.13.x, 5.15.x, ...) often
break this compatibility. However, prior to perl 5.13.4, all blead releases had
the same \f(CW\*(C`PERL_API_REVISION\*(C'\fR, \f(CW\*(C`PERL_API_VERSION\*(C'\fR, and \f(CW\*(C`PERL_API_SUBVERSION\*(C'\fR,
effectively declaring them as binary compatible, which they weren't. From now
on, blead releases will have a \f(CW\*(C`PERL_API_SUBVERSION\*(C'\fR equal to their
\&\f(CW\*(C`PERL_SUBVERSION\*(C'\fR, explicitly marking them as incompatible with each other.
.PP
Maintenance releases of stable perl versions will continue to make no
intentionally incompatible \s-1API\s0 changes.
.SS "Check \s-1API\s0 compatibility when loading \s-1XS\s0 modules"
.IX Subsection "Check API compatibility when loading XS modules"
When perl's \s-1API\s0 changes in incompatible ways (which usually happens between
every major release), \s-1XS\s0 modules compiled for previous versions of perl will not
work anymore. They will need to be recompiled against the new perl.
.PP
In order to ensure that modules are recompiled, and to prevent users from
accidentally loading modules compiled for old perls into newer ones, the
\&\f(CW\*(C`XS_APIVERSION_BOOTCHECK\*(C'\fR macro has been added. That macro, which is called
when loading every newly compiled extension, compares the \s-1API\s0 version of the
running perl with the version a module has been compiled for and raises an
exception if they don't match.
.SS "Binary Incompatible with all previous Perls"
.IX Subsection "Binary Incompatible with all previous Perls"
Some bit fields have been reordered; therefore, this release will not be binary
compatible with any previous Perl release.
.SS "Change in the parsing of certain prototypes"
.IX Subsection "Change in the parsing of certain prototypes"
Functions declared with the following prototypes now behave correctly as unary
functions:
.IP "\(bu" 4
\&\f(CW\*(C`*\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\esigil\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\e[...]\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`;$\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`;*\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`;\esigil\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`;\e[...]\*(C'\fR
.PP
Due to this bug fix, functions using the \f(CW\*(C`(*)\*(C'\fR, \f(CW\*(C`(;$)\*(C'\fR and \f(CW\*(C`(;*)\*(C'\fR prototypes
are parsed with higher precedence than before. So in the following example:
.PP
.Vb 2
\&  sub foo($);
\&  foo $a < $b;
.Ve
.PP
the second line is now parsed correctly as \f(CW\*(C`foo($a) < $b\*(C'\fR, rather than
\&\f(CW\*(C`foo($a < $b)\*(C'\fR. This happens when one of these operators is used in
an unparenthesised argument:
.PP
.Vb 9
\&  < > <= >= lt gt le ge
\&  == != <=> eq ne cmp ~~
\&  &
\&  | ^
\&  &&
\&  || //
\&  .. ...
\&  ?:
\&  = += \-= *= etc.
.Ve
.SH "Deprecations"
.IX Header "Deprecations"
.ie n .SS "List assignment to $["
.el .SS "List assignment to \f(CW$[\fP"
.IX Subsection "List assignment to $["
After assignment to \f(CW$[\fR has been deprecated and started to give warnings in
perl version 5.12.0, this version of perl also starts to emit a warning when
assigning to \f(CW$[\fR in list context. This fixes an oversight in 5.12.0.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Make string appending 100 times faster
.Sp
When doing a lot of string appending, perl could end up allocating a lot more
memory than needed in a very inefficient way, if perl was configured to use the
system's \f(CW\*(C`malloc\*(C'\fR implementation instead of its own.
.Sp
\&\f(CW\*(C`sv_grow\*(C'\fR, which is what's being used to allocate more memory if necessary when
appending to a string, has now been taught how to round up the memory it
requests to a certain geometric progression, making it much faster on certain
platforms and configurations. On Win32, it's now about 100 times faster.
.IP "\(bu" 4
For weak references, the common case of just a single weak reference per
referent has been optimised to reduce the storage required. In this case it
saves the equivalent of one small perl array per referent.
.IP "\(bu" 4
\&\f(CW\*(C`XPV\*(C'\fR, \f(CW\*(C`XPVIV\*(C'\fR, and \f(CW\*(C`XPVNV\*(C'\fR now only allocate the parts of the \f(CW\*(C`SV\*(C'\fR body
they actually use, saving some space.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
This release does not introduce any new modules or pragmata.
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.64 to 1.68.
.Sp
Among other things, the new version adds a new option to \f(CW\*(C`ptar\*(C'\fR to allow safe
creation of tarballs without world-writable files on Windows, allowing those
archives to be uploaded to \s-1CPAN\s0.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.11 to 1.12.
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.16 to 1.18.
.Sp
Carp now detects incomplete \fIcaller()\fR overrides and
avoids using bogus \f(CW@DB::args\fR. To provide backtraces, Carp relies on
particular behaviour of the caller built-in. Carp now detects if other code has
overridden this with an incomplete implementation, and modifies its backtrace
accordingly. Previously incomplete overrides would cause incorrect values in
backtraces (best case), or obscure fatal errors (worst case)
.Sp
This fixes certain cases of \f(CW\*(C`Bizarre copy of ARRAY\*(C'\fR caused by modules
overriding \f(CW\*(C`caller()\*(C'\fR incorrectly.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
Upgraded from version 2.027 to 2.030.
.ie n .IP """Compress::Raw::Zlib""" 4
.el .IP "\f(CWCompress::Raw::Zlib\fR" 4
.IX Item "Compress::Raw::Zlib"
Upgraded from version 2.027 to 2.030.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.31 to 3.31_01.
.Sp
Various issues in File::Spec::VMS have been fixed.
.ie n .IP """I18N::Langinfo""" 4
.el .IP "\f(CWI18N::Langinfo\fR" 4
.IX Item "I18N::Langinfo"
Upgraded from version 0.03 to 0.04.
.Sp
\&\f(CW\*(C`langinfo()\*(C'\fR now defaults to using \f(CW$_\fR if there is no argument given, just
like the documentation always claimed it did.
.ie n .IP """IO::Compress""" 4
.el .IP "\f(CWIO::Compress\fR" 4
.IX Item "IO::Compress"
Upgraded from version 2.027 to 2.030.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.36 to 2.37.
.Sp
Besides listing the updated core modules of this release, it also stops listing
the \f(CW\*(C`Filespec\*(C'\fR module. That module never existed in core. The scripts
generating \f(CW\*(C`Module::CoreList\*(C'\fR confused it with \f(CW\*(C`VMS::Filespec\*(C'\fR, which actually
is a core module, since the time of perl 5.8.7.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 3.21 to 3.22.
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.94 to 0.96.
.Sp
Among many other things, subtests without a \f(CW\*(C`plan\*(C'\fR or \f(CW\*(C`no_plan\*(C'\fR now have an
implicit \f(CW\*(C`done_testing()\*(C'\fR added to them.
.ie n .IP """Unicode::Collate""" 4
.el .IP "\f(CWUnicode::Collate\fR" 4
.IX Item "Unicode::Collate"
Upgraded from version 0.53 to 0.56.
.Sp
Among other things, it is now using \s-1UCA\s0 Revision 20 (based on Unicode 5.2.0) and
supports a couple of new locales.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
Upgraded from version 1.17 to 1.18.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
This release does not remove any modules or pragmata.
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperldiag\fR
.IX Subsection "perldiag"
.IP "\(bu" 4
The following existing diagnostics are now documented:
.RS 4
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR resolved as operator \f(CW%c\fR
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s} resolved to \f(CW%c\fR%s
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s%s} resolved to \f(CW%c\fR%s%s
.IP "\(bu" 4
Ambiguous use of \-%s resolved as \-&%s()
.IP "\(bu" 4
Invalid strict version format (%s)
.IP "\(bu" 4
Invalid version format (%s)
.IP "\(bu" 4
Invalid version object
.RE
.RS 4
.RE
.PP
\fIperlport\fR
.IX Subsection "perlport"
.IP "\(bu" 4
Documented a limitation of \fIalarm()\fR
on Win32.
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP "\(bu" 4
Minor fix to a multiple scalar match example.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
Compatibility with \f(CW\*(C`C++\*(C'\fR compilers has been improved.
.IP "\(bu" 4
On compilers that support it, \f(CW\*(C`\-Wwrite\-strings\*(C'\fR is now added to cflags by
default.
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
\&\fIt/op/print.t\fR has been added to test implicit printing of \f(CW$_\fR.
.IP "\(bu" 4
\&\fIt/io/errnosig.t\fR has been added to test for restoration of of \f(CW$!\fR when
leaving signal handlers.
.IP "\(bu" 4
\&\fIt/op/tie_fetch_count.t\fR has been added to see if \f(CW\*(C`FETCH\*(C'\fR is only called once
on tied variables.
.IP "\(bu" 4
\&\fIlib/Tie/ExtraHash.t\fR has been added to make sure the, previously untested,
Tie::ExtraHash keeps working.
.IP "\(bu" 4
\&\fIt/re/overload.t\fR has been added to test against string corruption in pattern
matches on overloaded objects. This is a \s-1TODO\s0 test.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "Win32" 4
.IX Item "Win32"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Fixed a possible hang in \fIt/op/readline.t\fR.
.IP "\(bu" 4
Fixed build process for \s-1SDK2003SP1\s0 compilers.
.IP "\(bu" 4
When using old 32\-bit compilers, the define \f(CW\*(C`_USE_32BIT_TIME_T\*(C'\fR will now be set
in \f(CW$Config{ccflags}\fR. This improves portability when compiling \s-1XS\s0 extensions
using new compilers, but for a perl compiled with old 32\-bit compilers.
.RE
.RS 4
.RE
.SH "Internal Changes"
.IX Header "Internal Changes"
.ie n .IP "Removed ""PERL_POLLUTE""" 4
.el .IP "Removed \f(CWPERL_POLLUTE\fR" 4
.IX Item "Removed PERL_POLLUTE"
The option to define \f(CW\*(C`PERL_POLLUTE\*(C'\fR to expose older 5.005 symbols for backwards
compatibility has been removed. It's use was always discouraged, and MakeMaker
contains a more specific escape hatch:
.Sp
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.Sp
This can be used for modules that have not been upgraded to 5.6 naming
conventions (and really should be completely obsolete by now).
.ie n .IP "Added ""PERL_STATIC_INLINE""" 4
.el .IP "Added \f(CWPERL_STATIC_INLINE\fR" 4
.IX Item "Added PERL_STATIC_INLINE"
The \f(CW\*(C`PERL_STATIC_INLINE\*(C'\fR define has been added to provide the best-guess
incantation to use for static inline functions, if the C compiler supports
C99\-style static inline. If it doesn't, it'll give a plain \f(CW\*(C`static\*(C'\fR.
.Sp
\&\f(CW\*(C`HAS_STATIC_INLINE\*(C'\fR can be used to check if the compiler actually supports
inline functions.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed.
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed.
.IP "\(bu" 4
A panic in the regular expression optimizer has been fixed (RT#75762).
.IP "\(bu" 4
Assignments to lvalue subroutines now honor copy-on-write behavior again, which
has been broken since version 5.10.0 (RT#75656).
.IP "\(bu" 4
Assignments to glob copies now behave just like assignments to regular globs
(RT#1804).
.IP "\(bu" 4
Within signal handlers, \f(CW$!\fR is now implicitly localized.
.IP "\(bu" 4
readline now honors \f(CW\*(C`<>\*(C'\fR overloading on tied
arguments.
.IP "\(bu" 4
\&\fIsubstr()\fR,
\&\fIpos()\fR, \fIkeys()\fR,
and \fIvec()\fR could, when used in combination
with lvalues, result in leaking the scalar value they operate on, and cause its
destruction to happen too late. This has now been fixed.
.IP "\(bu" 4
Building with \f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR, which has been broken accidentally in
5.13.3, now works again.
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
The changes in \fIsubstr()\fR
broke \f(CW\*(C`HTML::Parser\*(C'\fR <= 3.66. A fixed \f(CW\*(C`HTML::Parser\*(C'\fR is available as version
3.67 on \s-1CPAN\s0.
.IP "\(bu" 4
The changes in prototype handling break \f(CW\*(C`Switch\*(C'\fR. A patch has been sent
upstream and will hopefully appear on \s-1CPAN\s0 soon.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.13.4 represents approximately one month of development since Perl 5.13.3,
and contains 91,200 lines of changes across 436 files from 34 authors and
committers.
.PP
Thank you to the following for contributing to this release:
.PP
Abigail, Andy Armstrong, Andy Dougherty, Chas. Owens, Chip Salzenberg, Chris
\&'BinGOs' Williams, Craig A. Berry, David Cantrell, David Golden, David Mitchell,
Eric Brine, Father Chrysostomos, Florian Ragwitz, George Greer, Gerard Goossen,
H.Merijn Brand, James Mastros, Jan Dubois, Jerry D. Hedden, Joshua ben Jore,
Karl Williamson, Lars \s-1DXXXXXX\s0 \s-1XXX\s0, Leon Brocard, Lubomir Rintel, Nicholas
Clark, Paul Marquess, Rafael Garcia-Suarez, Reini Urban, Robin Barker, Slaven
Rezic, Steve Peters, Tony Cook, Wolfram Humann, Zefram
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
http://rt.perl.org/perlbug/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of \f(CW\*(C`perl \-V\*(C'\fR,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able to
help assess the impact of issues, figure out a resolution, and help co-ordinate
the release of patches to mitigate or fix the problem across all platforms on
which Perl is supported. Please only use this address for security issues in the
Perl core, not for modules independently distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
