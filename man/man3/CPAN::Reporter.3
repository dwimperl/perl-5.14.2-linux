.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPAN::Reporter 3"
.TH CPAN::Reporter 3 "2011-08-11" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Reporter \- Adds CPAN Testers reporting to CPAN.pm
.SH "VERSION"
.IX Header "VERSION"
version 1.2002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
From the \s-1CPAN\s0 shell:
.PP
.Vb 3
\&  cpan> install Task::CPAN::Reporter
\&  cpan> reload cpan
\&  cpan> o conf init test_report
.Ve
.PP
Installing Task::CPAN::Reporter will pull in additional dependencies
that new \s-1CPAN\s0 Testers will need.
.PP
Advanced \s-1CPAN\s0 Testers with custom Test::Reporter::Transport setups
may wish to install only CPAN::Reporter, which has fewer dependencies.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1CPAN\s0 Testers project captures and analyses detailed results from building
and testing \s-1CPAN\s0 distributions on multiple operating systems and multiple
versions of Perl.  This provides valuable feedback to module authors and
potential users to identify bugs or platform compatibility issues and improves
the overall quality and value of \s-1CPAN\s0.
.PP
One way individuals can contribute is to send a report for each module that
they test or install.  CPAN::Reporter is an add-on for the \s-1CPAN\s0.pm module to
send the results of building and testing modules to the \s-1CPAN\s0 Testers project.
Full support for CPAN::Reporter is available in \s-1CPAN\s0.pm as of version 1.92.
.SH "GETTING STARTED"
.IX Header "GETTING STARTED"
.SS "Installation"
.IX Subsection "Installation"
The first step in using CPAN::Reporter is to install it using whatever
version of \s-1CPAN\s0.pm is already installed.  \s-1CPAN\s0.pm will be upgraded as
a dependency if necessary.
.PP
.Vb 1
\&  cpan> install CPAN::Reporter
.Ve
.PP
If \s-1CPAN\s0.pm was upgraded, it needs to be reloaded.
.PP
.Vb 1
\&  cpan> reload cpan
.Ve
.SS "Configuration"
.IX Subsection "Configuration"
If upgrading from a very old version of \s-1CPAN\s0.pm, users may be prompted to renew
their configuration settings, including the 'test_report' option to enable
CPAN::Reporter.
.PP
If not prompted automatically, users should manually initialize CPAN::Reporter
support.  After enabling CPAN::Reporter, \s-1CPAN\s0.pm will automatically continue
with interactive configuration of CPAN::Reporter options.
.PP
.Vb 1
\&  cpan> o conf init test_report
.Ve
.PP
Users will need to enter an email address in one of the following formats:
.PP
.Vb 3
\&  johndoe@example.com
\&  John Doe <johndoe@example.com>
\&  "John Q. Public" <johnqpublic@example.com>
.Ve
.PP
Users that are new to CPAN::Reporter should accept the recommended values
for other configuration options.
.PP
Users will be prompted to create a \fIMetabase profile\fR file that uniquely
identifies their test reports. See \*(L"The Metabase\*(R" below for details.
.PP
After completing interactive configuration, be sure to commit (save) the \s-1CPAN\s0
configuration changes.
.PP
.Vb 1
\&  cpan> o conf commit
.Ve
.PP
See CPAN::Reporter::Config for advanced configuration settings.
.PP
\fIThe Metabase\fR
.IX Subsection "The Metabase"
.PP
CPAN::Reporter sends test reports to a server known as the Metabase.  This
requires an active Internet connection and a profile file.  To create the
profile, users will need to run \f(CW\*(C`metabase\-profile\*(C'\fR from a terminal window and
fill the information at the prompts. This will create a file called
\&\f(CW\*(C`metabase_id.json\*(C'\fR in the current directory. That file should be moved to the
\&\f(CW\*(C`.cpanreporter\*(C'\fR directory inside the user's home dir.
.PP
Users with an existing metabase profile file (e.g. from another machine),
should copy it into the \f(CW\*(C`.cpanreporter\*(C'\fR directory instead of creating
a new one.  Profile files may be located outside the \f(CW\*(C`.cpanreporter\*(C'\fR
directory by following instructions in CPAN::Reporter::Config.
.SS "Using CPAN::Reporter"
.IX Subsection "Using CPAN::Reporter"
Once CPAN::Reporter is enabled and configured, test or install modules with
\&\s-1CPAN\s0.pm as usual.
.PP
For example, to test the File::Marker module:
.PP
.Vb 1
\&  cpan> test File::Marker
.Ve
.PP
If a distribution's tests fail, users will be prompted to edit the report to
add additional information that might help the author understand the failure.
.SH "UNDERSTANDING TEST GRADES"
.IX Header "UNDERSTANDING TEST GRADES"
CPAN::Reporter will assign one of the following grades to the report:
.IP "\(bu" 4
\&\f(CW\*(C`pass\*(C'\fR \*(-- distribution built and tested correctly
.IP "\(bu" 4
\&\f(CW\*(C`fail\*(C'\fR \*(--  distribution failed to test correctly
.IP "\(bu" 4
\&\f(CW\*(C`unknown\*(C'\fR \*(-- distribution failed to build, had no test suite or outcome was
inconclusive
.IP "\(bu" 4
\&\f(CW\*(C`na\*(C'\fR \-\-\- distribution is not applicable to this platform and/or
version of Perl
.PP
In returning results of the test suite to \s-1CPAN\s0.pm, \*(L"pass\*(R" and \*(L"unknown\*(R" are
considered successful attempts to \*(L"make test\*(R" or \*(L"Build test\*(R" and will not
prevent installation.  \*(L"fail\*(R" and \*(L"na\*(R" are considered to be failures and
\&\s-1CPAN\s0.pm will not install unless forced.
.PP
An error from Makefile.PL/Build.PL or make/Build will also be graded as
\&\*(L"unknown\*(R" and a failure will be signaled to \s-1CPAN\s0.pm.
.PP
If prerequisites specified in \f(CW\*(C`Makefile.PL\*(C'\fR or \f(CW\*(C`Build.PL\*(C'\fR are not available,
no report will be generated and a failure will be signaled to \s-1CPAN\s0.pm.
.SH "PRIVACY WARNING"
.IX Header "PRIVACY WARNING"
CPAN::Reporter includes information in the test report about environment
variables and special Perl variables that could be affecting test results in
order to help module authors interpret the results of the tests.  This includes
information about paths, terminal, locale, user/group \s-1ID\s0, installed toolchain
modules (e.g. ExtUtils::MakeMaker) and so on.
.PP
These have been intentionally limited to items that should not cause harmful
personal information to be revealed \*(-- it does \fInot\fR include your entire
environment.  Nevertheless, please do not use CPAN::Reporter if you are
concerned about the disclosure of this information as part of your test report.
.PP
Users wishing to review this information may choose to edit the report
prior to sending it.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature using the \s-1CPAN\s0 Request Tracker.
Bugs can be submitted through the web interface at
http://rt.cpan.org/Dist/Display.html?Queue=CPAN\-Reporter <http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Reporter>
.PP
When submitting a bug or request, please include a test-file or a patch to an
existing test-file that illustrates the bug or desired feature.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Information about CPAN::Testers:
.IP "\(bu" 4
CPAN::Testers \*(-- overview of \s-1CPAN\s0 Testers architecture stack
.IP "\(bu" 4
<http://www.cpantesters.org> \*(-- project home with all reports
.IP "\(bu" 4
<http://wiki.cpantesters.org> \*(-- documentation and wiki
.PP
Additional Documentation:
.IP "\(bu" 4
CPAN::Reporter::Config \*(-- advanced configuration settings
.IP "\(bu" 4
CPAN::Reporter::FAQ \*(-- hints and tips
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-cpan\-reporter at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN\-Reporter <http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN-Reporter>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
http://github.com/dagolden/cpan\-reporter <http://github.com/dagolden/cpan-reporter>
.PP
.Vb 1
\&  git clone http://github.com/dagolden/cpan\-reporter
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2006 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
