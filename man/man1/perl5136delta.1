.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5136DELTA 1"
.TH PERL5136DELTA 1 "2011-09-26" "perl v5.14.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5136delta \- what is new for perl v5.13.6
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.13.5 release and
the 5.13.6 release.
.PP
If you are upgrading from an earlier release such as 5.13.4, first read
perl5135delta, which describes differences between 5.13.4 and
5.13.5.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """(?^...)"" regex construct added to signify default modifiers"
.el .SS "\f(CW(?^...)\fP regex construct added to signify default modifiers"
.IX Subsection "(?^...) regex construct added to signify default modifiers"
A caret (also called a \*(L"circumflex accent\*(R") \f(CW"^"\fR immediately following
a \f(CW"(?"\fR in a regular expression now means that the subexpression is to
not inherit the surrounding modifiers such as \f(CW\*(C`/i\*(C'\fR, but to revert to the
Perl defaults.  Any modifiers following the caret override the defaults.
.PP
The stringification of regular expressions now uses this
notation.  E.g., before, \f(CW\*(C`qr/hlagh/i\*(C'\fR would be stringified as
\&\f(CW\*(C`(?i\-xsm:hlagh)\*(C'\fR, but now it's stringified as \f(CW\*(C`(?^i:hlagh)\*(C'\fR.
.PP
The main purpose of this is to allow tests that rely on the
stringification to not have to change when new modifiers are added.
See \*(L"Extended Patterns\*(R" in perlre.
.ie n .SS """d"", ""l"", and ""u"" regex modifiers added"
.el .SS "\f(CW``d''\fP, \f(CW``l''\fP, and \f(CW``u''\fP regex modifiers added"
.IX Subsection """d"", ""l"", and ""u"" regex modifiers added"
These modifiers are currently only available within a \f(CW\*(C`(?...)\*(C'\fR construct.
.PP
The \f(CW"l"\fR modifier says to compile the regular expression as if it were
in the scope of \f(CW\*(C`use locale\*(C'\fR, even if it is not.
.PP
The \f(CW"u"\fR modifier says to compile the regular expression as if it were
in the scope of a \f(CW\*(C`use feature "unicode_strings"\*(C'\fR pragma.
.PP
The \f(CW"d"\fR modifier is used to override any \f(CW\*(C`use locale\*(C'\fR and
\&\f(CW\*(C`use feature "unicode_strings"\*(C'\fR pragmas that are in effect at the time
of compiling the regular expression.
.PP
See just below and \*(L"(?dlupimsx\-imsx)\*(R" in perlre.
.ie n .SS """use feature ""unicode_strings"""" now applies to some regex matching"
.el .SS "\f(CWuse feature ``unicode_strings''\fP now applies to some regex matching"
.IX Subsection "use feature ""unicode_strings"" now applies to some regex matching"
Another chunk of the \*(L"The \*(R"Unicode Bug"" in perlunicode is fixed in this
release.  Now, regular expressions compiled within the scope of the
\&\*(L"unicode_strings\*(R" feature will match the same whether or not the target
string is encoded in utf8, with regard to \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\eb\*(C'\fR, and their
complements.  Work is underway to add the \f(CW\*(C`[[:posix:]]\*(C'\fR character
classes and case sensitive matching to the control of this feature, but
was not complete in time for this dot release.
.ie n .SS """\eN{...}"" now handles Unicode named character sequences"
.el .SS "\f(CW\eN{...}\fP now handles Unicode named character sequences"
.IX Subsection "N{...} now handles Unicode named character sequences"
Unicode has a number of named character sequences, in which particular sequences
of code points are given names.  \f(CW\*(C`\eN{...}\*(C'\fR now recognizes these.
See charnames.
.ie n .SS "New function ""charnames::string_vianame()"""
.el .SS "New function \f(CWcharnames::string_vianame()\fP"
.IX Subsection "New function charnames::string_vianame()"
This function is a run-time version of \f(CW\*(C`\eN{...}\*(C'\fR, returning the string
of characters whose Unicode name is its parameter.  It can handle
Unicode named character sequences, whereas the pre-existing
\&\f(CW\*(C`charnames::vianame()\*(C'\fR cannot, as the latter returns a single code
point.
See charnames.
.SS "Reentrant regular expression engine"
.IX Subsection "Reentrant regular expression engine"
It is now safe to use regular expressions within \f(CW\*(C`(?{...})\*(C'\fR and
\&\f(CW\*(C`(??{...})\*(C'\fR code blocks inside regular expressions.
.PP
These block are still experimental, however, and still have problems with
lexical (\f(CW\*(C`my\*(C'\fR) variables, lexical pragmata and abnormal exiting.
.SS "Custom per-subroutine check hooks"
.IX Subsection "Custom per-subroutine check hooks"
\&\s-1XS\s0 code in an extension module can now annotate a subroutine (whether
implemented in \s-1XS\s0 or in Perl) so that nominated \s-1XS\s0 code will be called
at compile time (specifically as part of op checking) to change the op
tree of that subroutine.  The compile-time check function (supplied by
the extension module) can implement argument processing that can't be
expressed as a prototype, generate customised compile-time warnings,
perform constant folding for a pure function, inline a subroutine
consisting of sufficiently simple ops, replace the whole call with a
custom op, and so on.  This was previously all possible by hooking the
\&\f(CW\*(C`entersub\*(C'\fR op checker, but the new mechanism makes it easy to tie the
hook to a specific subroutine.  See \*(L"cv_set_call_checker\*(R" in perlapi.
.PP
To help in writing custom check hooks, several subtasks within standard
\&\f(CW\*(C`entersub\*(C'\fR op checking have been separated out and exposed in the \s-1API\s0.
.ie n .SS "Return value of ""delete $+{...}"""
.el .SS "Return value of \f(CWdelete $+{...}\fP"
.IX Subsection "Return value of delete $+{...}"
Custom regular expression engines can now determine the return value of
\&\f(CW\*(C`delete\*(C'\fR on an entry of \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.ie n .SS """keys"", ""values"" work on arrays"
.el .SS "\f(CWkeys\fP, \f(CWvalues\fP work on arrays"
.IX Subsection "keys, values work on arrays"
You can now use the \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR, \f(CW\*(C`each\*(C'\fR builtin functions on arrays
(previously you could only use them on hashes).  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perldelta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Stringification of regexes has changed"
.IX Subsection "Stringification of regexes has changed"
Default regular expression modifiers are now notated by using
\&\f(CW\*(C`(?^...)\*(C'\fR.  Code relying on the old stringification will fail.  The
purpose of this is so that when new modifiers are added, such code will
not have to change (after this one time), as the stringification will
automatically incorporate the new modifiers.
.PP
Code that needs to work properly with both old\- and new-style regexes
can avoid the whole issue by using (for Perls since 5.9.5):
.PP
.Vb 2
\& use re qw(regexp_pattern);
\& my ($pat, $mods) = regexp_pattern($re_ref);
.Ve
.PP
where \f(CW$re_ref\fR is a reference to a compiled regular expression.  Upon
return, \f(CW$mods\fR will be a string containing all the non-default
modifiers used when the regular expression was compiled, and \f(CW$pattern\fR
the actual pattern.
.PP
If the actual stringification is important, or older Perls need to be
supported, you can use something like the following:
.PP
.Vb 2
\&    # Accept both old and new\-style stringification
\&    my $modifiers = (qr/foobar/ =~ /\eQ(?^/) ? \*(Aq^\*(Aq : \*(Aq\-xism\*(Aq;
.Ve
.PP
And then use \f(CW$modifiers\fR instead of \f(CW\*(C`\-xism\*(C'\fR.
.SS "Regular expressions retain their localeness when interpolated"
.IX Subsection "Regular expressions retain their localeness when interpolated"
Regular expressions compiled under \f(CW"use locale"\fR now retain this when
interpolated into a new regular expression compiled outside a
\&\f(CW"use locale"\fR, and vice-versa.
.PP
Previously, a regular expression interpolated into another one inherited
the localeness of the surrounding one, losing whatever state it
originally had.  This is considered a bug fix, but may trip up code that
has come to rely on the incorrect behavior.
.SS "Directory handles not copied to threads"
.IX Subsection "Directory handles not copied to threads"
On systems that do not have a \f(CW\*(C`fchdir\*(C'\fR function, newly-created threads no
longer inherit directory handles from their parent threads. Such programs
would probably have crashed anyway
[perl #75154] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=75154>.
.SS "Negation treats strings differently from before"
.IX Subsection "Negation treats strings differently from before"
The unary negation operator \f(CW\*(C`\-\*(C'\fR now treats strings that look like numbers
as numbers
[perl #57706] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=57706>.
.SS "Negative zero"
.IX Subsection "Negative zero"
Negative zero (\-0.0), when converted to a string, now becomes \*(L"0\*(R" on all
platforms. It used to become \*(L"\-0\*(R" on some, but \*(L"0\*(R" on others.
.PP
If you still need to determine whether a zero is negative, use
\&\f(CW\*(C`sprintf("%g", $zero) =~ /^\-/\*(C'\fR or the Data::Float module on \s-1CPAN\s0.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
The bulk of the \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR module used to be in the perl
core. It has now been moved to an \s-1XS\s0 module, to reduce the overhead for
programs that do not use \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.IP "\(bu" 4
Eliminate \f(CW\*(C`PL_*\*(C'\fR accessor functions under ithreads.
.Sp
When \f(CW\*(C`MULTIPLICITY\*(C'\fR was first developed, and interpreter state moved into an
interpreter struct, thread and interpreter local \f(CW\*(C`PL_*\*(C'\fR variables were defined
as macros that called accessor functions, returning the address of the value,
outside of the perl core. The intent was to allow members within the interpreter
struct to change size without breaking binary compatibility, so that bug fixes
could be merged to a maintenance branch that necessitated such a size change.
.Sp
However, some non-core code defines \f(CW\*(C`PERL_CORE\*(C'\fR, sometimes intentionally to
bypass this mechanism for speed reasons, sometimes for other reasons but with
the inadvertent side effect of bypassing this mechanism. As some of this code is
widespread in production use, the result is that the core \fBcan't\fR change the
size of members of the interpreter struct, as it will break such modules
compiled against a previous release on that maintenance branch. The upshot is
that this mechanism is redundant, and well-behaved code is penalised by
it. Hence it can and should be removed.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Extract\*(C'\fR has been upgraded from version 0.42 to 0.44
.IP "\(bu" 4
\&\f(CW\*(C`Carp\*(C'\fR has been upgraded from version 1.18 to 1.19.
.Sp
It no longer autovivifies the \f(CW*CORE::GLOBAL::caller\fR glob, something it
started doing in 1.18, which was released with perl 5.13.4
[perl #78082] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=78082>
.IP "\(bu" 4
\&\f(CW\*(C`Compress::Raw::Bzip2\*(C'\fR has been upgraded from version 2.030 to 2.031
.Sp
Updated to use bzip2 1.0.6
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR has been upgraded from version 1.94_57 to 1.94_61
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR has been upgraded from version 2.128 to 2.129.
.Sp
\&\f(CW\*(C`Dumpxs\*(C'\fR no longer crashes with globs returned by \f(CW*$io_ref\fR
[perl #72332] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=72332>.
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR has been upgraded from version 2.40 to 2.51.
.Sp
It is now safe to use this module in combination with threads.
.IP "\(bu" 4
\&\f(CW\*(C`File::DosGlob\*(C'\fR has been upgraded from version 1.02 to 1.03.
.Sp
It allows patterns containing literal parentheses (they no longer need to
be escaped). On Windows, it no longer adds an extra \fI./\fR to the file names
returned when the pattern is a relative glob with a drive specification,
like \fIc:*.pl\fR
[perl #71712] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=71712>.
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR has been upgraded from version 1.17 to 1.18.
.Sp
It improves handling of backslashes on Windows, so that paths such as
\&\fIc:\edir\e/file\fR are no longer generated
[perl #71710] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=71710>.
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR has been upgraded from version 0.05 to 0.06
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Cmd\*(C'\fR has been upgraded from version 0.60 to 0.64
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR has been upgraded from version 1.06 to 1.07.
.Sp
The internal \f(CW\*(C`xclose\*(C'\fR routine now knows how to handle file descriptors, as
documented, so duplicating \s-1STDIN\s0 in a child process using its file
descriptor now works
[perl #76474] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=71710>.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Codes\*(C'\fR has been upgraded from version 3.13 to 3.14.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR has been upgraded from version 1.15 to 1.16.
.Sp
It fixes an infinite loop in \f(CW\*(C`Locale::Maketext::Guts::_compile()\*(C'\fR when
working with tainted values
(\s-1CPAN\s0 \s-1RT\s0 #40727 <https://rt.cpan.org/Public/Bug/Display.html?id=40727>).
.Sp
\&\f(CW\*(C`\->maketext\*(C'\fR calls will now backup and restore \f(CW$@\fR so that error
messages are not suppressed
(\s-1CPAN\s0 \s-1RT\s0 #34182 <https://rt.cpan.org/Public/Bug/Display.html?id=34182>).
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt\*(C'\fR has been upgraded from version 1.95 to 1.97.
.Sp
This prevents \f(CW\*(C`sqrt($int)\*(C'\fR from crashing under \f(CW\*(C`use bigrat;\*(C'\fR
[perl #73534] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=73534>.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR has been upgraded from version 0.64 to 0.65.
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR has been upgraded from version 1.10 to 1.11.
.Sp
\&\f(CW\*(C`overload::Method\*(C'\fR can now handle subroutines that are themselves blessed
into overloaded classes
[perl #71998] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=71998>.
.IP "\(bu" 4
\&\f(CW\*(C`PathTools\*(C'\fR has been upgraded from version 3.31_01 to 3.34.
.IP "\(bu" 4
\&\f(CW\*(C`podlators\*(C'\fR has been upgraded from version 2.3.1 to 2.4.0
.IP "\(bu" 4
\&\f(CW\*(C`sigtrap\*(C'\fR has been upgraded from version 1.04 to 1.05.
.Sp
It no longer tries to modify read-only arguments when generating a
backtrace
[perl #72340] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=72340>.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR has been upgraded from version 1.77_03 to 1.81_01.
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR has been upgrade from version 1.33_03 to 1.34
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\*(C'\fR has been upgraded from version 0.59 to 0.63
.Sp
U::C::Locale newly supports locales: ar, be, bg, de_\|_phonebook, hu, hy, kk, mk, nso, om, 
tn, vi, hr, ig, ru, sq, se, sr, to and uk
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR has been upgraded from version 1.06 to 1.07
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR has been upgraded from version 0.98 to 0.99
.Sp
B::Deparse now properly handles the code that applies a conditional
pattern match against implicit \f(CW$_\fR as it was fixed in
[perl #20444] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=20444>.
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR has been upgraded from version 1.10 to 1.11
.SH "Documentation"
.IX Header "Documentation"
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlapi\fR
.IX Subsection "perlapi"
.IP "\(bu" 4
The documentation for the \f(CW\*(C`SvTRUE\*(C'\fR macro was simply wrong in stating that
get-magic is not processed. It has been corrected.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The 'Layer does not match this perl' error message has been replaced with
these more helpful messages:
.RS 4
.IP "\(bu" 4
PerlIO layer function table size (%d) does not match size expected by this
perl (%d)
.IP "\(bu" 4
PerlIO layer instance size (%d) does not match size expected by this perl
(%d)
.RE
.RS 4
.Sp
[perl #73754] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=73754>
.RE
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
The script \fIt/op/threads\-dirh.t\fR has been added, which tests interaction
of threads and directory handles.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1IRIX\s0" 4
.IX Item "IRIX"
Conversion of strings to floating-point numbers is now more accurate on
\&\s-1IRIX\s0 systems
[perl #32380] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=32380>.
.IP "Mac \s-1OS\s0 X" 4
.IX Item "Mac OS X"
Early versions of Mac \s-1OS\s0 X (Darwin) had buggy implementations of the
\&\f(CW\*(C`setregid\*(C'\fR, \f(CW\*(C`setreuid\*(C'\fR, \f(CW\*(C`setrgid\*(C'\fR and \f(CW\*(C`setruid\*(C'\fR functions, so perl
would pretend they did not exist.
.Sp
These functions are now recognised on Mac \s-1OS\s0 10.5 (Leopard; Darwin 9) and
higher, as they have been fixed
[perl #72990] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=72990>.
.IP "OpenVOS" 4
.IX Item "OpenVOS"
perl now builds again with OpenVOS (formerly known as Stratus \s-1VOS\s0)
[perl #78132] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=78132>.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
The shortening of symbols longer than 31 characters in the C sources is
now done by the compiler rather than by xsubpp (which could only do so
for generated symbols in \s-1XS\s0 code).
.IP "Windows" 4
.IX Item "Windows"
\&\f(CW$Config{gccversion}\fR is now set correctly when perl is built using the
mingw64 compiler from <http://mingw64.org>
[perl #73754] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=73754>.
.Sp
The build process proceeds more smoothly with mingw and dmake when
\&\fIC:\eMSYS\ebin\fR is in the \s-1PATH\s0, due to a \f(CW\*(C`Cwd\*(C'\fR fix.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
See \*(L"Regular expressions retain their localeness when interpolated\*(R",
above.
.IP "\(bu" 4
The \f(CW\*(C`sv_cmp_flags\*(C'\fR, \f(CW\*(C`sv_cmp_locale_flags\*(C'\fR, \f(CW\*(C`sv_eq_flags\*(C'\fR and
\&\f(CW\*(C`sv_collxfrm_flags\*(C'\fR functions have been added. These are like their
non\-_flags counterparts, but allow one to specify whether get-magic is
processed.
.Sp
The \f(CW\*(C`sv_cmp\*(C'\fR, \f(CW\*(C`sv_cmp_locale\*(C'\fR, \f(CW\*(C`sv_eq\*(C'\fR and \f(CW\*(C`sv_collxfrm\*(C'\fR functions have
been replaced with wrappers around the new functions.
.IP "\(bu" 4
A new \f(CW\*(C`sv_2bool_flags\*(C'\fR function has been added.
.Sp
This is like \f(CW\*(C`sv_2bool\*(C'\fR, but it lets the calling code decide whether
get-magic is handled. \f(CW\*(C`sv_2bool\*(C'\fR is now a macro that calls the new
function.
.IP "\(bu" 4
A new macro, \f(CW\*(C`SvTRUE_nomg\*(C'\fR, has been added.
.Sp
This is like \f(CW\*(C`SvTRUE\*(C'\fR, except that it does not process magic. It uses the
new \f(CW\*(C`sv_2bool_flags\*(C'\fR function.
.IP "\(bu" 4
\&\f(CW\*(C`sv_catsv_flags\*(C'\fR no longer calls \f(CW\*(C`mg_get\*(C'\fR on its second argument (the
source string) if the flags passed to it do not include \s-1SV_GMAGIC\s0. So it
now matches the documentation.
.IP "\(bu" 4
A new interface has been added for custom check hooks on subroutines. See
\&\*(L"Custom per-subroutine check hooks\*(R", above.
.IP "\(bu" 4
List op building functions have been added to the
\&\s-1API\s0.  See op_append_elem,
op_append_list, and
op_prepend_elem.
.IP "\(bu" 4
The \s-1LINKLIST\s0 macro, part of op building that
constructs the execution-order op chain, has been added to the \s-1API\s0.
.IP "\(bu" 4
Many functions ending with pvn now have equivalent pv/pvs/sv versions.
.IP "\(bu" 4
The \f(CW\*(C`save_freeop\*(C'\fR, \f(CW\*(C`save_op\*(C'\fR, \f(CW\*(C`save_pushi32ptr\*(C'\fR and \f(CW\*(C`save_pushptrptr\*(C'\fR
functions have been added to the \s-1API\s0.
.IP "\(bu" 4
The new \s-1API\s0 function \f(CW\*(C`parse_stmtseq()\*(C'\fR parses a sequence of statements, up
to closing brace or \s-1EOF\s0.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A regular expression match in the right-hand side of a global substitution
(\f(CW\*(C`s///g\*(C'\fR) that is in the same scope will no longer cause match variables
to have the wrong values on subsequent iterations. This can happen when an
array or hash subscript is interpolated in the right-hand side, as in
\&\f(CW\*(C`s|(.)|@a{ print($1), /./ }|g\*(C'\fR
[perl #19078] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=19078>.
.IP "\(bu" 4
Constant-folding used to cause
.Sp
.Vb 1
\&  $text =~ ( 1 ? /phoo/ : /bear/)
.Ve
.Sp
to turn into
.Sp
.Vb 1
\&  $text =~ /phoo/
.Ve
.Sp
at compile time. Now it correctly matches against \f(CW$_\fR
[perl #20444] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=20444>.
.IP "\(bu" 4
Parsing Perl code (either with string \f(CW\*(C`eval\*(C'\fR or by loading modules) from
within a \f(CW\*(C`UNITCHECK\*(C'\fR block no longer causes the interpreter to crash
[perl #70614] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=70614>.
.IP "\(bu" 4
When \f(CW\*(C`\-d\*(C'\fR is used on the shebang (\f(CW\*(C`#!\*(C'\fR) line, the debugger now has access
to the lines of the main program. In the past, this sometimes worked and
sometimes did not, depending on what order things happened to be arranged
in memory
[perl #71806] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=71806>.
.IP "\(bu" 4
The \f(CW\*(C`y///\*(C'\fR or \f(CW\*(C`tr///\*(C'\fR operator now calls get-magic (e.g., the \f(CW\*(C`FETCH\*(C'\fR
method of a tie) on its left-hand side just once, not twice
[perl #76814] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=76814>.
.IP "\(bu" 4
String comparison (\f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`ne\*(C'\fR, \f(CW\*(C`lt\*(C'\fR, \f(CW\*(C`gt\*(C'\fR, \f(CW\*(C`le\*(C'\fR, \f(CW\*(C`ge\*(C'\fR and
\&\f(CW\*(C`cmp\*(C'\fR) and logical not (\f(CW\*(C`not\*(C'\fR and \f(CW\*(C`!\*(C'\fR) operators no longer call magic
(e.g., tie methods) twice on their operands
[perl #76814] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=76814>.
.Sp
This bug was introduced in an earlier 5.13 release, and does not affect
perl 5.12.
.IP "\(bu" 4
When a tied (or other magic) variable is used as, or in, a regular
expression, it no longer has its \f(CW\*(C`FETCH\*(C'\fR method called twice
[perl #76814] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=76814>.
.Sp
This bug was introduced in an earlier 5.13 release, and does not affect
perl 5.12.
.IP "\(bu" 4
The \f(CW\*(C`\-C\*(C'\fR command line option can now be followed by other options
[perl #72434] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=72434>.
.IP "\(bu" 4
Assigning a glob to a \s-1PVLV\s0 used to convert it to a plain string. Now it
works correctly, and a \s-1PVLV\s0 can hold a glob. This would happen when a
nonexistent hash or array element was passed to a subroutine:
.Sp
.Vb 2
\&  sub { $_[0] = *foo }\->($hash{key});
\&  # $_[0] would have been the string "*main::foo"
.Ve
.Sp
It also happened when a glob was assigned to, or returned from, an element
of a tied array or hash
[perl #36051] <http://rt.perl.org/rt3//Public/Bug/Display.html?id=36051>.
.IP "\(bu" 4
Creating a new thread when directory handles were open used to cause a
crash, because the handles were not cloned, but simply passed to the new
thread, resulting in a double free.
.Sp
Now directory handles are cloned properly, on systems that have a \f(CW\*(C`fchdir\*(C'\fR
function. On other systems, new threads simply do not inherit directory
handles from their parent threads
[perl #75154] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=75154>.
.IP "\(bu" 4
The regular expression parser no longer hangs when parsing \f(CW\*(C`\e18\*(C'\fR and
\&\f(CW\*(C`\e88\*(C'\fR.
.Sp
This bug was introduced in version 5.13.5 and did not affect earlier
versions
[perl #78058] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=78058>.
.IP "\(bu" 4
Subroutine redefinition works once more in the debugger
[perl #48332] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=48332>.
.IP "\(bu" 4
The \f(CW\*(C`&\*(C'\fR \f(CW\*(C`|\*(C'\fR \f(CW\*(C`^\*(C'\fR bitwise operators no longer coerce read-only arguments
[perl #20661] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=20661>.
.IP "\(bu" 4
Stringifying a scalar containing \-0.0 no longer has the affect of turning
false into true
[perl #45133] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=45133>.
.IP "\(bu" 4
Aliasing packages by assigning to globs or deleting packages by deleting
their containing stash elements used to have erratic effects on method
resolution, because the internal 'isa' caches were not reset. This has been
fixed.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a custom sort routine could crash if too many nested
subroutine calls occurred from within the sort routine
[perl #77930] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=77930>.
.Sp
This bug was introduced in an earlier 5.13 release, and did not affect
perl 5.12.
.IP "\(bu" 4
The \f(CW\*(C`eval_sv\*(C'\fR and \f(CW\*(C`eval_pv\*(C'\fR C functions now set \f(CW$@\fR correctly when
there is a syntax error and no \f(CW\*(C`G_KEEPERR\*(C'\fR flag, and never set it if the
\&\f(CW\*(C`G_KEEPERR\*(C'\fR flag is present 
[perl #3719] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=3719>.
.IP "\(bu" 4
Nested \f(CW\*(C`map\*(C'\fR and \f(CW\*(C`grep\*(C'\fR blocks no longer leak memory when processing
large lists
[perl #48004] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=48004>.
.IP "\(bu" 4
Malformed \f(CW\*(C`version\*(C'\fR objects no longer cause crashes
[perl #78286] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=78286>.
.IP "\(bu" 4
The interpreter no longer crashes when freeing deeply-nested arrays of
arrays. Hashes have not been fixed yet
[perl #44225] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=44225>.
.IP "\(bu" 4
The mechanism for freeing objects in globs used to leave dangling
pointers to freed SVs, meaning Perl users could see corrupted state
during destruction.
.Sp
Perl now only frees the affected slots of the \s-1GV\s0, rather than freeing
the \s-1GV\s0 itself. This makes sure that there are no dangling refs or
corrupted state during destruction.
.IP "\(bu" 4
The typeglob \f(CW\*(C`*,\*(C'\fR, which holds the scalar variable \f(CW$,\fR (output field
separator), had the wrong reference count in child threads.
.IP "\(bu" 4
\&\f(CW\*(C`splice\*(C'\fR now calls set-magic. This means that, for instance, changes made
by \f(CW\*(C`splice @ISA\*(C'\fR are respected by method calls
[perl #78400] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=78400>.
.IP "\(bu" 4
\&\f(CW\*(C`use v5.8\*(C'\fR no longer leaks memory
[perl #78436] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=78436>.
.IP "\(bu" 4
The \s-1XS\s0 multicall \s-1API\s0 no longer causes subroutines to lose reference counts
if called via the multicall interface from within those very subroutines.
This affects modules like List::Util. Calling one of its functions with an
active subroutine as the first argument could cause a crash
[perl #78070] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=78070>.
.SH "Errata"
.IX Header "Errata"
.IP "\(bu" 4
Fixed a typo in perl5135delta regarding array slices and smart matching
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.13.6 represents approximately one month of development since Perl
5.13.5 and contains 67920 lines of changes across 566 files from 47 authors
and committers:
.PP
A. Sinan Unur, Aaron Crane, Alex Davies, Ali Polatel, Allen Smith, Andrew Rodland,
Andy Dougherty, Ben Morrow, brian d foy, Casey West, Chip Salzenberg, Chris
\&'BinGOs' Williams, Craig A. Berry, David Golden, David Mitchell, Eric Brine,
Father Chrysostomos, Florian Ragwitz, George Greer, gregor herrmann, Jan Dubois,
Jerry D. Hedden, Jesse Vincent, Joshua Pritikin, Karl Williamson, kmx, Michael
G Schwern, Mike Kelly, Nicholas Clark, Paul Green, Rafael Garcia-Suarez, Renee
Baecker, Ricardo Signes, Sisyphus, Slaven Rezic, Steffen Mu\*:ller, Steve Hay,
Sullivan Beck, Tatsuhiko Miyagawa, Todd Rinaldo, Tony Cook, Tye McQueen, Vernon
Lyon, Walt Mankowski, Zefram, Zsba\*'n Ambrus, \*(AEvar Arnfjo\*:r\*(d- Bjarmason.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
