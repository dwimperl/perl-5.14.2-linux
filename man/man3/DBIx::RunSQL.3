.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::RunSQL 3"
.TH DBIx::RunSQL 3 "2011-10-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::RunSQL \- run SQL to create a database schema
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    #!/usr/bin/perl \-w
\&    use strict;
\&    use lib \*(Aqlib\*(Aq;
\&    use DBIx::RunSQL;
\&
\&    my $test_dbh = DBIx::RunSQL\->create(
\&        dsn     => \*(Aqdbi:SQLite:dbname=:memory:\*(Aq,
\&        sql     => \*(Aqsql/create.sql\*(Aq,
\&        force   => 1,
\&        verbose => 1,
\&    );
\&    
\&    ... # run your tests with a DB setup fresh from setup.sql
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS """DBIx::RunSQL\->create ARGS"""
.el .SS "\f(CWDBIx::RunSQL\->create ARGS\fP"
.IX Subsection "DBIx::RunSQL->create ARGS"
Creates the database and returns the database handle
.IP "\(bu" 4
\&\f(CW\*(C`sql\*(C'\fR \- name of the file containing the \s-1SQL\s0 statements
.Sp
The default is \f(CW\*(C`sql/create.sql\*(C'\fR
.Sp
If \f(CW\*(C`sql\*(C'\fR is a reference to a glob or a filehandle,
the \s-1SQL\s0 will be read from that. \fBnot implemented\fR
.Sp
If \f(CW\*(C`sql\*(C'\fR is undefined, the \f(CW$::DATA\fR or the \f(CW0\fR filehandle will
be read until exhaustion.  \fBnot implemented\fR
.Sp
This allows to create SQL-as-programs as follows:
.Sp
.Vb 2
\&  #!/usr/bin/perl \-w \-MDBIx::RunSQL=create
\&  create table ...
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`dsn\*(C'\fR, \f(CW\*(C`user\*(C'\fR, \f(CW\*(C`password\*(C'\fR \- \s-1DBI\s0 parameters for connecting to the \s-1DB\s0
.IP "\(bu" 4
\&\f(CW\*(C`dbh\*(C'\fR \- a premade database handle to be used instead of \f(CW\*(C`dsn\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`force\*(C'\fR \- continue even if errors are encountered
.IP "\(bu" 4
\&\f(CW\*(C`verbose\*(C'\fR \- print each \s-1SQL\s0 statement as it is run
.IP "\(bu" 4
\&\f(CW\*(C`verbose_handler\*(C'\fR \- callback to call with each \s-1SQL\s0 statement instead of \f(CW\*(C`print\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`verbose_fh\*(C'\fR \- filehandle to write to instead of \f(CW\*(C`STDOUT\*(C'\fR
.ie n .SS """DBIx::RunSQL\->run_sql_file ARGS"""
.el .SS "\f(CWDBIx::RunSQL\->run_sql_file ARGS\fP"
.IX Subsection "DBIx::RunSQL->run_sql_file ARGS"
.Vb 1
\&    my $dbh = DBI\->connect(...)
\&    
\&    for my $file (sort glob \*(Aq*.sql\*(Aq) {
\&        DBIx::RunSQL\->run_sql_file(
\&            verbose => 1,
\&            dbh     => $dbh,
\&            sql     => $file,
\&        );
\&    };
.Ve
.PP
Runs an \s-1SQL\s0 file on a prepared database handle.
.IP "\(bu" 4
\&\f(CW\*(C`dbh\*(C'\fR \- a premade database handle
.IP "\(bu" 4
\&\f(CW\*(C`sql\*(C'\fR \- name of the file containing the \s-1SQL\s0 statements
.IP "\(bu" 4
\&\f(CW\*(C`force\*(C'\fR \- continue even if errors are encountered
.IP "\(bu" 4
\&\f(CW\*(C`verbose\*(C'\fR \- print each \s-1SQL\s0 statement as it is run
.IP "\(bu" 4
\&\f(CW\*(C`verbose_handler\*(C'\fR \- callback to call with each \s-1SQL\s0 statement instead of \f(CW\*(C`print\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`verbose_fh\*(C'\fR \- filehandle to write to instead of \f(CW\*(C`STDOUT\*(C'\fR
.SH "PROGRAMMER USAGE"
.IX Header "PROGRAMMER USAGE"
This module abstracts away the \*(L"run these \s-1SQL\s0 statements to set up 
your database\*(R" into a module. In some situations you want to give the
setup \s-1SQL\s0 to a database admin, but in other situations, for example testing,
you want to run the \s-1SQL\s0 statements against an in-memory database. This
module abstracts away the reading of \s-1SQL\s0 from a file and allows for various
command line parameters to be passed in. A skeleton \f(CW\*(C`create\-db.sql\*(C'\fR
looks like this:
.PP
.Vb 4
\&    #!/usr/bin/perl \-w
\&    use strict;
\&    use lib \*(Aqlib\*(Aq;
\&    use DBIx::RunSQL;
\&
\&    DBIx::RunSQL\->handle_command_line(\*(Aqmyapp\*(Aq);
\&
\&    =head1 NAME
\&
\&    create\-db.pl \- Create the database
\&
\&    =head1 ABSTRACT
\&
\&    This sets up the database. The following
\&    options are recognized:
\&
\&    =over 4
\&
\&    =item C<\-\-user> USERNAME
\&
\&    =item C<\-\-password> PASSWORD
\&
\&    =item C<\-\-dsn> DSN
\&
\&    The DBI DSN to use for connecting to
\&    the database
\&
\&    =item C<\-\-sql> SQLFILE
\&
\&    The alternative SQL file to use
\&    instead of C<sql/create.sql>.
\&
\&    =item C<\-\-force>
\&
\&    Don\*(Aqt stop on errors
\&
\&    =item C<\-\-help>
\&
\&    Show this message.
\&
\&    =cut
.Ve
.ie n .SS """DBIx::RunSQL\->handle_command_line"""
.el .SS "\f(CWDBIx::RunSQL\->handle_command_line\fP"
.IX Subsection "DBIx::RunSQL->handle_command_line"
Parses the command line. This is a convenience method, which
passes the following command line arguments to \f(CW\*(C`\->create\*(C'\fR:
.PP
.Vb 6
\&  \-\-user
\&  \-\-password
\&  \-\-dsn
\&  \-\-sql
\&  \-\-force
\&  \-\-verbose
.Ve
.PP
In addition, it handles the following switches through Pod::Usage:
.PP
.Vb 2
\&  \-\-help
\&  \-\-man
.Ve
.PP
See also the section \s-1PROGRAMMER\s0 \s-1USAGE\s0 for a sample program to set
up a database from an \s-1SQL\s0 file.
.SH "NOTES"
.IX Header "NOTES"
If you find yourself wanting to write \s-1SELECT\s0 statements,
consider looking at Querylet instead, which is geared towards that
and even has an interface for Excel or \s-1HTML\s0 output.
.PP
If you find yourself wanting to write parametrized queries as
\&\f(CW\*(C`.sql\*(C'\fR files, consider looking at Data::Phrasebook::SQL
or potentially DBIx::SQLHandler.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ORLite::Migrate
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The public repository of this module is 
http://github.com/Corion/DBIx\*(--RunSQL <http://github.com/Corion/DBIx--RunSQL>.
.SH "SUPPORT"
.IX Header "SUPPORT"
The public support forum of this module is
<http://perlmonks.org/>.
.SH "BUG TRACKER"
.IX Header "BUG TRACKER"
Please report bugs in this module via the \s-1RT\s0 \s-1CPAN\s0 bug queue at
https://rt.cpan.org/Public/Dist/Display.html?Name=DBIx\-RunSQL <https://rt.cpan.org/Public/Dist/Display.html?Name=DBIx-RunSQL>
or via mail to dbix\-runsql\-Bugs@rt.cpan.org.
.SH "AUTHOR"
.IX Header "AUTHOR"
Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR
.SH "COPYRIGHT (c)"
.IX Header "COPYRIGHT (c)"
Copyright 2009\-2011 by Max Maischein \f(CW\*(C`corion@cpan.org\*(C'\fR.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same terms as Perl itself.
