.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Reporter 3"
.TH Test::Reporter 3 "2011-07-19" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Reporter \- sends test results to cpan\-testers@perl.org
.SH "VERSION"
.IX Header "VERSION"
version 1.58
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Test::Reporter;
\&
\&  my $reporter = Test::Reporter\->new(
\&      transport => \*(AqFile\*(Aq,
\&      transport_args => [ dir => \*(Aq/tmp\*(Aq ],
\&  );
\&
\&  $reporter\->grade(\*(Aqpass\*(Aq);
\&  $reporter\->distribution(\*(AqMail\-Freshmeat\-1.20\*(Aq);
\&  $reporter\->send() || die $reporter\->errstr();
\&
\&  # or
\&
\&  my $reporter = Test::Reporter\->new(
\&      transport => \*(AqFile\*(Aq,
\&      transport_args => [ dir => \*(Aq/tmp\*(Aq ],
\&  );
\&
\&  $reporter\->grade(\*(Aqfail\*(Aq);
\&  $reporter\->distribution(\*(AqMail\-Freshmeat\-1.20\*(Aq);
\&  $reporter\->comments(\*(Aqoutput of a failed make test goes here...\*(Aq);
\&  $reporter\->edit_comments(); # if you want to edit comments in an editor
\&  $reporter\->send() || die $reporter\->errstr();
\&
\&  # or
\&
\&  my $reporter = Test::Reporter\->new(
\&      transport => \*(AqFile\*(Aq,
\&      transport_args => [ dir => \*(Aq/tmp\*(Aq ],
\&      grade => \*(Aqfail\*(Aq,
\&      distribution => \*(AqMail\-Freshmeat\-1.20\*(Aq,
\&      from => \*(Aqwhoever@wherever.net (Whoever Wherever)\*(Aq,
\&      comments => \*(Aqoutput of a failed make test goes here...\*(Aq,
\&      via => \*(AqCPANPLUS X.Y.Z\*(Aq,
\&  );
\&  $reporter\->send() || die $reporter\->errstr();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Reporter reports the test results of any given distribution to the \s-1CPAN\s0
Testers project. Test::Reporter has wide support for various perl5's and
platforms.
.PP
\&\s-1CPAN\s0 Testers no longer receives test reports by email, but reports still
resemble an email message. This module has numerous legacy \*(L"features\*(R"
left over from the days of email transport.
.SS "Transport mechanism"
.IX Subsection "Transport mechanism"
The choice of transport is set with the \f(CW\*(C`transport\*(C'\fR argument.  \s-1CPAN\s0 Testers
should usually install Test::Reporter::Transport::Metabase and use
\&'Metabase' as the \f(CW\*(C`transport\*(C'\fR.  See that module for necessary transport
arguments.  Advanced testers may wish to test on a machine different from the
one used to send reports.  Consult the \s-1CPAN\s0 Testers
Wiki <http://wiki.cpantesters.org/> for examples using other transport classes.
.PP
The legacy email-based transports have been split out into a separate
Test::Reporter::Transport::Legacy distribution and methods solely
related to email have been deprecated.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "Required attributes"
.IX Subsection "Required attributes"
.IP "\(bu" 4
\&\fBdistribution\fR
.Sp
Gets or sets the name of the distribution you're working on, for example
Foo\-Bar\-0.01. There are no restrictions on what can be put here.
.IP "\(bu" 4
\&\fBfrom\fR
.Sp
Gets or sets the e\-mail address of the individual submitting
the test report, i.e. \*(L"John Doe <jdoe@example.com>\*(R".
.IP "\(bu" 4
\&\fBgrade\fR
.Sp
Gets or sets the success or failure of the distributions's 'make test'
result. This must be one of:
.Sp
.Vb 6
\&  grade     meaning
\&  \-\-\-\-\-     \-\-\-\-\-\-\-
\&  pass      all tests passed
\&  fail      one or more tests failed
\&  na        distribution will not work on this platform
\&  unknown   tests did not exist or could not be run
.Ve
.SS "Transport attributes"
.IX Subsection "Transport attributes"
.IP "\(bu" 4
\&\fBtransport\fR
.Sp
Gets or sets the transport type. The transport type argument is
refers to a 'Test::Reporter::Transport' subclass.  The default is 'Null',
which uses the Test::Reporter::Transport::Null class and does
nothing when \f(CW\*(C`send\*(C'\fR is called.
.Sp
You can add additional arguments after the transport
selection.  These will be passed to the constructor of the lower-level
transport. See \f(CW\*(C`transport_args\*(C'\fR.
.Sp
.Vb 3
\& $reporter\->transport(
\&     \*(AqFile\*(Aq, dir => \*(Aq/tmp\*(Aq
\& );
.Ve
.Sp
This is not designed to be an extensible platform upon which to build
transport plugins. That functionality is planned for the next-generation
release of Test::Reporter, which will reside in the CPAN::Testers namespace.
.IP "\(bu" 4
\&\fBtransport_args\fR
.Sp
Optional.  Gets or sets transport arguments that will used in the constructor
for the selected transport, as appropriate.
.SS "Optional attributes"
.IX Subsection "Optional attributes"
.IP "\(bu" 4
\&\fBcomments\fR
.Sp
Gets or sets the comments on the test report. This is most
commonly used for distributions that did not pass a 'make test'.
.IP "\(bu" 4
\&\fBdebug\fR
.Sp
Gets or sets the value that will turn debugging on or off.
Debug messages are sent to \s-1STDERR\s0. 1 for on, 0 for off. Debugging
generates very verbose output and is useful mainly for finding bugs
in Test::Reporter itself.
.IP "\(bu" 4
\&\fBdir\fR
.Sp
Defaults to the current working directory. This method specifies
the directory that \fIwrite()\fR writes test report files to.
.IP "\(bu" 4
\&\fBtimeout\fR
.Sp
Gets or sets the timeout value for the submission of test
reports. Default is 120 seconds.
.IP "\(bu" 4
\&\fBvia\fR
.Sp
Gets or sets the value that will be appended to
X\-Reported-Via, generally this is useful for distributions that use
Test::Reporter to report test results. This would be something
like \*(L"\s-1CPANPLUS\s0 0.036\*(R".
.SS "Deprecated attributes"
.IX Subsection "Deprecated attributes"
\&\s-1CPAN\s0 Testers no longer uses email for submitting reports.  These attributes
are deprecated.
.IP "\(bu" 4
\&\fBaddress\fR
.IP "\(bu" 4
\&\fBmail_send_args\fR
.IP "\(bu" 4
\&\fBmx\fR
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
\&\fBnew\fR
.Sp
This constructor returns a Test::Reporter object.
.IP "\(bu" 4
\&\fBperl_version\fR
.Sp
Returns a hashref containing _archname, _osvers, and _myconfig based upon the
perl that you are using. Alternatively, you may supply a different perl (path
to the binary) as an argument, in which case the supplied perl will be used as
the basis of the above data.
.IP "\(bu" 4
\&\fBsubject\fR
.Sp
Returns the subject line of a report, i.e.
\&\*(L"\s-1PASS\s0 Mail\-Freshmeat\-1.20 Darwin 6.0\*(R". 'grade' and 'distribution' must
first be specified before calling this method.
.IP "\(bu" 4
\&\fBreport\fR
.Sp
Returns the actual content of a report, i.e.
\&\*(L"This distribution has been tested as part of the cpan-testers...\*(R".
\&'comments' must first be specified before calling this method, if you have
comments to make and expect them to be included in the report.
.IP "\(bu" 4
\&\fBsend\fR
.Sp
Sends the test report to cpan\-testers@perl.org via the defined \f(CW\*(C`transport\*(C'\fR
mechanism.  You must check \fIerrstr()\fR on a \fIsend()\fR in order to be guaranteed
delivery.
.IP "\(bu" 4
\&\fBedit_comments\fR
.Sp
Allows one to interactively edit the comments within a text
editor. \fIcomments()\fR doesn't have to be first specified, but it will work
properly if it was.  Accepts an optional hash of arguments:
.RS 4
.IP "\(bu" 4
\&\fBsuffix\fR
.Sp
Optional. Allows one to specify the suffix (\*(L"extension\*(R") of the temp
file used by \fBedit_comments\fR.  Defaults to '.txt'.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\fBerrstr\fR
.Sp
Returns an error message describing why something failed. You must check
\&\fIerrstr()\fR on a \fIsend()\fR in order to be guaranteed delivery.
.IP "\(bu" 4
\&\fBwrite and read\fR
.Sp
These methods are used in situations where you wish to save reports locally
rather than transmitting them to \s-1CPAN\s0 Testers immediately.  You use \fIwrite()\fR on
the machine that you are testing from, transfer the written test reports from
the testing machine to the sending machine, and use \fIread()\fR on the machine that
you actually want to submit the reports from. \fIwrite()\fR will write a file in an
internal format that contains 'From', 'Subject', and the content of the report.
The filename will be represented as:
grade.distribution.archname.osvers.seconds_since_epoch.pid.rpt. \fIwrite()\fR uses
the value of \fIdir()\fR if it was specified, else the cwd.
.Sp
On the machine you are testing from:
.Sp
.Vb 5
\&  my $reporter = Test::Reporter\->new
\&  (
\&    grade => \*(Aqpass\*(Aq,
\&    distribution => \*(AqTest\-Reporter\-1.16\*(Aq,
\&  )\->write();
.Ve
.Sp
On the machine you are submitting from:
.Sp
.Vb 5
\&  # wrap in an opendir if you\*(Aqve a lot to submit
\&  my $reporter;
\&  $reporter = Test::Reporter\->new()\->read(
\&    \*(Aqpass.Test\-Reporter\-1.16.i686\-linux.2.2.16.1046685296.14961.rpt\*(Aq
\&  )\->send() || die $reporter\->errstr();
.Ve
.Sp
\&\fIwrite()\fR also accepts an optional filehandle argument:
.Sp
.Vb 2
\&  my $fh; open $fh, \*(Aq>\-\*(Aq;  # create a STDOUT filehandle object
\&  $reporter\->write($fh);   # prints the report to STDOUT
.Ve
.SS "Deprecated methods"
.IX Subsection "Deprecated methods"
.IP "\(bu" 4
\&\fBmessage_id\fR
.SH "CAVEATS"
.IX Header "CAVEATS"
If you experience a long delay sending reports with Test::Reporter, you may be
experiencing a wait as Test::Reporter attempts to determine your email
address.  Always use the \f(CW\*(C`from\*(C'\fR parameter to set your email address
explicitly.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For more about \s-1CPAN\s0 Testers:
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers reports <http://www.cpantesters.org/>
.IP "\(bu" 4
\&\s-1CPAN\s0 Testers wiki <http://wiki.cpantesters.org/>
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-test\-reporter at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/Public/Dist/Display.html?Name=Test\-Reporter <http://rt.cpan.org/Public/Dist/Display.html?Name=Test-Reporter>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
http://github.com/dagolden/test\-reporter <http://github.com/dagolden/test-reporter>
.PP
.Vb 1
\&  git clone http://github.com/dagolden/test\-reporter
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Adam J. Foxson <afoxson@pobox.com>
.IP "\(bu" 4
David Golden <dagolden@cpan.org>
.IP "\(bu" 4
Kirrily \*(L"Skud\*(R" Robert <skud@cpan.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.IP "\(bu" 4
Richard Soderberg <rsod@cpan.org>
.IP "\(bu" 4
Kurt Starsinic <Kurt.Starsinic@isinet.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Authors and Contributors.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
