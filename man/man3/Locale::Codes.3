.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Locale::Codes 3"
.TH Locale::Codes 3 "2011-09-26" "perl v5.14.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::Codes \- a distribution of modules to handle locale codes
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBLocale::Codes\fR is a distribution containing a set of modules.  The
modules each deal with different types of codes which identify parts
of the locale including languages, countries, currency, etc.
.PP
Currently, the following modules are included:
.IP "\fBLocale::Country\fR" 4
.IX Item "Locale::Country"
This includes support for country codes (such as those listed in \s-1ISO\-3166\s0)
to specify the country.
.IP "\fBLocale::Language\fR" 4
.IX Item "Locale::Language"
This includes support for language codes (such as those listed in \s-1ISO\-639\s0)
to specify the language.
.IP "\fBLocale::Currency\fR" 4
.IX Item "Locale::Currency"
This includes support for currency codes (such as those listed in \s-1ISO\-4217\s0)
to specify the currency.
.IP "\fBLocale::Script\fR" 4
.IX Item "Locale::Script"
This includes support for script codes (such as those listed in \s-1ISO\-15924\s0)
to specify the script.
.PP
Each module can support an arbitrary number of code sets, and it it
not required that the relationship between these code sets be
one-to-one.  For example, the Locale::Country module supports code
sets from \s-1ISO\-3166\s0 and the \s-1FIPS\s0 10 standard, and they do not break the
world down into exactly the same sets of countries. This does not
cause any problem (though converting codes from \s-1ISO\-3166\s0 to \s-1FIPS\s0 or
back will not work except for countries that are one-to-one).
.PP
All data in all of these modules comes directly from the original
standards (or as close to direct as possible), so it should be
up-to-date at the time of release.
.PP
I plan on releasing a new version a couple of times a year to
incorporate any changes made in the standards. However, I don't always
know about changes that occur, so if any of the standards change, and
you want a new release sooner, just email me and I'll get one out.
.SH "NEW CODE SETS"
.IX Header "NEW CODE SETS"
I'm always open to suggestions for new code sets.
.PP
In order for me to add a code set, I want the following criteria
to be met:
.IP "\fBGeneral-use code set\fR" 4
.IX Item "General-use code set"
If a code set is not general use, I'm not likely to spend the time
to add and support it.
.IP "\fBAn official source of data\fR" 4
.IX Item "An official source of data"
I require an official (or at least, a \s-1NEARLY\s0 official) source where I
can get the data on a regular basis.
.Sp
Ideally, I'd only get data from an official source, but sometimes that
is not possible. For example the \s-1ISO\s0 standards are not typically
available for free, so I may have to get some of that data from
alternate sources that I'm confident are getting their data from the
official source.
.Sp
As an example, I get some country data from the \s-1CIA\s0 World
Factbook. Given the nature of the source, I'm sure they're updating
data from the official sources and I consider it \*(L"nearly\*(R" official.
.Sp
There are many 3rd party sites which maintain lists (many of which are
actually in a more convenient form than the official sites).
Unfortunately, I will reject most of them since I have no feel for how
\&\*(L"official\*(R" they are.
.IP "\fBA free source of the data\fR" 4
.IX Item "A free source of the data"
Obviously, the data must be free-of-charge. I'm not interested in
paying for the data (and I'm not interested in the overhead of having
someone else pay for the data for me).
.IP "\fBA reliable source of data\fR" 4
.IX Item "A reliable source of data"
The source of data must come from a source that I can reasonably expect
to exist for the foreseeable future since I will be extremely reluctant
to drop support for a data set once it's included.
.Sp
I am also reluctant to accept data sent to me by an individual.
Although I appreciate the offer, it is simply not practical to consider
an individual contribution as a reliable source of data. The source
should be an official agency of some sort.
.PP
These requirements are open to discussion. If you have a code set
you'd like to see added, but which may not meet all of the above
requirements, feel free to email me and we'll discuss it.  Depending
on circumstances, I may be willing to waive some of these criteria.
.SH "COMMON ALIASES"
.IX Header "COMMON ALIASES"
As of version 2.00, the modules supported common variants of names.
.PP
For example, Locale::Country supports variant names for countries, and
a few of the most common ones are included in the data. The country
code for \*(L"United States\*(R" is \*(L"us\*(R", so:
.PP
.Vb 2
\&   country2code(\*(AqUnited States\*(Aq);
\&      => "us"
.Ve
.PP
Now the following will also return 'us':
.PP
.Vb 2
\&   country2code(\*(AqUnited States of America\*(Aq);
\&   country2code(\*(AqUSA\*(Aq);
.Ve
.PP
Any number of common aliases may be included in the data, in addition
to the names that come directly from the standards.  If you have a
common alias for a country, language, or any other of the types of
codes, let me know and I'll add it, with some restrictions.
.PP
For example, the country name \*(L"North Korea\*(R" never appeared in any of
the official sources (instead, it was \*(L"Korea, North\*(R" or \*(L"Korea,
Democratic People's Republic of\*(R". I would honor a request to add an
alias \*(L"North Korea\*(R" since that's a very common way to specify the
country (please don't request this... I've already added it).
.PP
On the other hand, a request to add Zaire as an alias for \*(L"Congo, The
Democratic Republic of\*(R" may not be honored. The country's official
name is not Zaire, so adding it as an alias violates the standard.
Zaire was kept as an alias in versions prior to 3.00, but it has been
removed. Other aliases (if any) which no longer appear in any standard
have also been removed.
.SH "ROUTINES"
.IX Header "ROUTINES"
As of 3.10, the interface for all of the modules listed above are
identical (as a matter of fact, they are all just wrappers around a
central module which does all the real work).
.PP
In order to maintain the documentation for the modules consistently,
the functions are all documented here, rather than in the documentation
for the separate modules.
.PP
The name of the function depends on the module. For example, every module
contains a function \*(L"code2XXX\*(R" where \s-1XXX\s0 refers to the type of data
(country, language, currency, or script). So, the Locale::Country module
contains the function code2country, the Locale::Language module contains
the function code2language, etc.
.PP
In all of the functions below, \s-1CODE\s0 refers to a code for one element in
the code set. For example, in the two-letter country codes from \s-1ISO\s0 3166\-1,
the code 'fi' is used to refer to the country Finland. \s-1CODE\s0 is always
case insensitive (though when a code is returned, it will always be in
the case as used in the standard), so 'fi', '\s-1FI\s0', and 'Fi' would all
be equivalent.
.PP
\&\s-1CODESET\s0 refers to a constant specified in the documentation for each
module to label the various code sets. For example, in the
Locale::Language module, \s-1CODESET\s0 could be \s-1LOCALE_CODE_ALPHA_2\s0 or
\&\s-1LOCALE_CODE_ALPHA_3\s0 (among others). Most functions have a default one,
so they do not need to be specified. So the following calls are valid:
.PP
.Vb 3
\&   code2country("fi");
\&   code2country("fi",LOCALE_CODE_ALPHA_2);
\&   code2country("fin",LOCALE_CODE_ALPHA_3);
.Ve
.PP
Since \s-1LOCALE_CODE_ALPHA_2\s0 is the default code set, the first two are
identical.
.IP "\fBcode2country ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "code2country ( CODE [,CODESET] )"
.PD 0
.IP "\fBcode2language( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "code2language( CODE [,CODESET] )"
.IP "\fBcode2currency( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "code2currency( CODE [,CODESET] )"
.IP "\fBcode2script  ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "code2script  ( CODE [,CODESET] )"
.PD
These functions take a code and returns a string which contains
the name of the element identified.  If the code is not a valid
code in the \s-1CODESET\s0 specified then \f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
The name of the element is the name as specified in the standard,
and as a result, different variations of an element name may
be returned for different values of \s-1CODESET\s0.
.Sp
For example, the \fBalpha\-2\fR country code set defines the two-letter
code \*(L"bo\*(R" to be \*(L"Bolivia, Plurinational State of\*(R", whereas the
\&\fBalpha\-3\fR code set defines the code 'bol' to be the country \*(L"Bolivia
(Plurinational State of)\*(R". So:
.Sp
.Vb 2
\&   code2country(\*(Aqbo\*(Aq,LOCALE_CODE_ALPHA_2);
\&      => \*(AqBolivia, Plurinational State of\*(Aq
\&
\&   code2country(\*(Aqbol\*(Aq,LOCALE_CODE_ALPHA_3);
\&      => \*(AqBolivia (Plurinational State of)\*(Aq
.Ve
.IP "\fBcountry2code ( \s-1NAME\s0 [,CODESET] )\fR" 4
.IX Item "country2code ( NAME [,CODESET] )"
.PD 0
.IP "\fBlanguage2code( \s-1NAME\s0 [,CODESET] )\fR" 4
.IX Item "language2code( NAME [,CODESET] )"
.IP "\fBcurrency2code( \s-1NAME\s0 [,CODESET] )\fR" 4
.IX Item "currency2code( NAME [,CODESET] )"
.IP "\fBscript2code  ( \s-1NAME\s0 [,CODESET] )\fR" 4
.IX Item "script2code  ( NAME [,CODESET] )"
.PD
These functions takes the name of an element (or any of it's aliases)
and returns the code that corresponds to it, if it exists. If \s-1NAME\s0
could not be identified as the name of one of the elements, then
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
The name is not case sensitive. Also, any known variation of a name
may be passed in.
.Sp
For example, even though the country name returned using
\&\s-1LOCALE_CODE_ALPHA_2\s0 and \s-1LOCALE_CODE_ALPHA_3\s0 country codes for Bolivia is different,
either country name may be passed in since for each code set, in addition to
the alias 'Bolivia'. So:
.Sp
.Vb 3
\&   country2code(\*(AqBolivia, Plurinational State of\*(Aq,
\&                LOCALE_CODE_ALPHA_2);
\&      => bo
\&
\&   country2code(\*(AqBolivia (Plurinational State of)\*(Aq,
\&                LOCALE_CODE_ALPHA_2);
\&      => bo
\&
\&   country2code(\*(AqBolivia\*(Aq,LOCALE_CODE_ALPHA_2);
\&      => bo
.Ve
.IP "\fBcountry_code2code ( \s-1CODE\s0 ,CODESET ,CODESET2 )\fR" 4
.IX Item "country_code2code ( CODE ,CODESET ,CODESET2 )"
.PD 0
.IP "\fBlanguage_code2code( \s-1CODE\s0 ,CODESET ,CODESET2 )\fR" 4
.IX Item "language_code2code( CODE ,CODESET ,CODESET2 )"
.IP "\fBcurrency_code2code( \s-1CODE\s0 ,CODESET ,CODESET2 )\fR" 4
.IX Item "currency_code2code( CODE ,CODESET ,CODESET2 )"
.IP "\fBscript_code2code  ( \s-1CODE\s0 ,CODESET ,CODESET2 )\fR" 4
.IX Item "script_code2code  ( CODE ,CODESET ,CODESET2 )"
.PD
These functions takes a a code from one code set, and returns the
corresponding code from another code set. \s-1CODE\s0 must exists in the code
set specified by \s-1CODESET\s0 and must have a corresponding code in the
code set specified by \s-1CODESET2\s0 or \f(CW\*(C`undef\*(C'\fR will be returned.
.Sp
Both CODESETs must be explicitly entered.
.Sp
.Vb 3
\&   country_code2code(\*(Aqfin\*(Aq, LOCALE_CODE_ALPHA_3,
\&                     LOCALE_CODE_ALPHA_2);
\&      => \*(Aqfi\*(Aq
.Ve
.IP "\fBall_country_codes ( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_country_codes ( [CODESET] )"
.PD 0
.IP "\fBall_language_codes( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_language_codes( [CODESET] )"
.IP "\fBall_currency_codes( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_currency_codes( [CODESET] )"
.IP "\fBall_script_codes  ( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_script_codes  ( [CODESET] )"
.PD
These returns a list of all code in the code set. The codes will be
sorted.
.IP "\fBall_country_names ( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_country_names ( [CODESET] )"
.PD 0
.IP "\fBall_language_names( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_language_names( [CODESET] )"
.IP "\fBall_currency_names( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_currency_names( [CODESET] )"
.IP "\fBall_script_names  ( [\s-1CODESET\s0] )\fR" 4
.IX Item "all_script_names  ( [CODESET] )"
.PD
These return a list of all elements names for which there is a
corresponding code in the specified code set.
.Sp
The names returned are exactly as they are specified in the standard,
and are sorted.
.Sp
Since not all elements are listed in all code sets, the list of
elements may differ depending on the code set specified.
.SH "SEMI-PRIVATE ROUTINES"
.IX Header "SEMI-PRIVATE ROUTINES"
Additional semi-private routines which may be used to modify the
internal data are also available.  Given their status, they aren't
exported, and so need to be called by prefixing the function name with
the package name.
.IP "\fBLocale::Country::rename_country  ( \s-1CODE\s0 ,NEW_NAME [,CODESET] )\fR" 4
.IX Item "Locale::Country::rename_country  ( CODE ,NEW_NAME [,CODESET] )"
.PD 0
.IP "\fBLocale::Language::rename_language( \s-1CODE\s0 ,NEW_NAME [,CODESET] )\fR" 4
.IX Item "Locale::Language::rename_language( CODE ,NEW_NAME [,CODESET] )"
.IP "\fBLocale::Currency::rename_currency( \s-1CODE\s0 ,NEW_NAME [,CODESET] )\fR" 4
.IX Item "Locale::Currency::rename_currency( CODE ,NEW_NAME [,CODESET] )"
.IP "\fBLocale::Script::rename_script    ( \s-1CODE\s0 ,NEW_NAME [,CODESET] )\fR" 4
.IX Item "Locale::Script::rename_script    ( CODE ,NEW_NAME [,CODESET] )"
.PD
These routines are used to change the official name of an element. At
that point, the name returned by the code2XXX routine would be
\&\s-1NEW_NAME\s0 instead of the name specified in the standard.
.Sp
The original name will remain as an alias.
.Sp
For example, the official country name for code 'gb' is 'United
Kingdom'.  If you want to change that, you might call:
.Sp
.Vb 1
\&   Locale::Country::rename_country(\*(Aqgb\*(Aq, \*(AqGreat Britain\*(Aq);
.Ve
.Sp
This means that calling code2country('gb') will now return 'Great
Britain' instead of 'United Kingdom'.
.Sp
If any error occurs, a warning is issued and 0 is returned. An error
occurs if \s-1CODE\s0 doesn't exist in the specified code set, or if
\&\s-1NEW_NAME\s0 is already in use but for a different element.
.Sp
If the routine succeeds, 1 is returned.
.IP "\fBLocale::Country::add_country  ( \s-1CODE\s0 ,NAME [,CODESET] )\fR" 4
.IX Item "Locale::Country::add_country  ( CODE ,NAME [,CODESET] )"
.PD 0
.IP "\fBLocale::Language::add_language( \s-1CODE\s0 ,NAME [,CODESET] )\fR" 4
.IX Item "Locale::Language::add_language( CODE ,NAME [,CODESET] )"
.IP "\fBLocale::Currency::add_currency( \s-1CODE\s0 ,NAME [,CODESET] )\fR" 4
.IX Item "Locale::Currency::add_currency( CODE ,NAME [,CODESET] )"
.IP "\fBLocale::Script::add_script    ( \s-1CODE\s0 ,NAME [,CODESET] )\fR" 4
.IX Item "Locale::Script::add_script    ( CODE ,NAME [,CODESET] )"
.PD
These routines are used to add a new code and name to the data.
.Sp
Both \s-1CODE\s0 and \s-1NAME\s0 must be unused in the data set or an error
occurs (though \s-1NAME\s0 may be used in a different data set).
.Sp
For example, to create the fictitious country named \*(L"Duchy of
Grand Fenwick\*(R" with codes \*(L"gf\*(R" and \*(L"fen\*(R", use the following:
.Sp
.Vb 2
\&   Locale::Country::add_country("fe","Duchy of Grand Fenwick",
\&                                LOCALE_CODE_ALPHA_2);
\&
\&   Locale::Country::add_country("fen","Duchy of Grand Fenwick",
\&                                LOCALE_CODE_ALPHA_3);
.Ve
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBLocale::Country::delete_country  ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Country::delete_country  ( CODE [,CODESET] )"
.PD 0
.IP "\fBLocale::Language::delete_language( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Language::delete_language( CODE [,CODESET] )"
.IP "\fBLocale::Currency::delete_currency( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Currency::delete_currency( CODE [,CODESET] )"
.IP "\fBLocale::Script::delete_script    ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Script::delete_script    ( CODE [,CODESET] )"
.PD
These routines are used to delete a code from the data.
.Sp
\&\s-1CODE\s0 must refer to an existing code in the code set.
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBLocale::Country::add_country_alias  ( \s-1NAME\s0 ,NEW_NAME )\fR" 4
.IX Item "Locale::Country::add_country_alias  ( NAME ,NEW_NAME )"
.PD 0
.IP "\fBLocale::Language::add_language_alias( \s-1NAME\s0 ,NEW_NAME )\fR" 4
.IX Item "Locale::Language::add_language_alias( NAME ,NEW_NAME )"
.IP "\fBLocale::Currency::add_currency_alias( \s-1NAME\s0 ,NEW_NAME )\fR" 4
.IX Item "Locale::Currency::add_currency_alias( NAME ,NEW_NAME )"
.IP "\fBLocale::Script::add_script_alias    ( \s-1NAME\s0 ,NEW_NAME )\fR" 4
.IX Item "Locale::Script::add_script_alias    ( NAME ,NEW_NAME )"
.PD
These routines are used to add a new alias to the data. They do
not alter the return value of the code2XXX function.
.Sp
\&\s-1NAME\s0 must be an existing element name, and \s-1NEW_NAME\s0 must
be unused or an error occurs.
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBLocale::Country::delete_country_alias  ( \s-1NAME\s0 )\fR" 4
.IX Item "Locale::Country::delete_country_alias  ( NAME )"
.PD 0
.IP "\fBLocale::Language::delete_language_alias( \s-1NAME\s0 )\fR" 4
.IX Item "Locale::Language::delete_language_alias( NAME )"
.IP "\fBLocale::Currency::delete_currency_alias( \s-1NAME\s0 )\fR" 4
.IX Item "Locale::Currency::delete_currency_alias( NAME )"
.IP "\fBLocale::Script::delete_script_alias    ( \s-1NAME\s0 )\fR" 4
.IX Item "Locale::Script::delete_script_alias    ( NAME )"
.PD
These routines are used to delete an alias from the data. Once
removed, the element may not be referred to by \s-1NAME\s0.
.Sp
\&\s-1NAME\s0 must be one of a list of at least two names that may be used to
specify an element. If the element may only be referred to by a single
name, you'll need to use the add_XXX_alias function to add a new alias
first, or the remove_XXX function to remove the element entirely.
.Sp
If the alias is used as the name in any code set, one of the other
names will be used instead. Predicting exactly which one will
be used requires you to know the order in which the standards
were read, which is not reliable, so you may want to use the
rename_XXX function to force one of the alternate names to be
used.
.Sp
The return value is 1 on success, 0 on an error.
.IP "\fBLocale::Country::rename_country_code  ( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Country::rename_country_code  ( CODE ,NEW_CODE [,CODESET] )"
.PD 0
.IP "\fBLocale::Language::rename_language_code( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Language::rename_language_code( CODE ,NEW_CODE [,CODESET] )"
.IP "\fBLocale::Currency::rename_currency_code( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Currency::rename_currency_code( CODE ,NEW_CODE [,CODESET] )"
.IP "\fBLocale::Script::rename_script_code    ( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Script::rename_script_code    ( CODE ,NEW_CODE [,CODESET] )"
.PD
These routines are used to change the official code for an element. At
that point, the code returned by the XXX2code routine would be
\&\s-1NEW_CODE\s0 instead of the code specified in the standard.
.Sp
\&\s-1NEW_CODE\s0 may either be a code that is not in use, or it may be an
alias for \s-1CODE\s0 (in which case, \s-1CODE\s0 becomes and alias and \s-1NEW_CODE\s0
becomes the \*(L"real\*(R" code).
.Sp
The original code is kept as an alias, so that the code2XXX routines
will work with either the code from the standard or the new code.
.Sp
However, the all_XXX_codes routine will only return the codes which
are considered \*(L"real\*(R" (which means that the list of codes will now
contain \s-1NEW_CODE\s0, but will not contain \s-1CODE\s0).
.IP "\fBLocale::Country::add_country_code_alias  ( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Country::add_country_code_alias  ( CODE ,NEW_CODE [,CODESET] )"
.PD 0
.IP "\fBLocale::Language::add_language_code_alias( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Language::add_language_code_alias( CODE ,NEW_CODE [,CODESET] )"
.IP "\fBLocale::Currency::add_currency_code_alias( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Currency::add_currency_code_alias( CODE ,NEW_CODE [,CODESET] )"
.IP "\fBLocale::Script::add_script_code_alias    ( \s-1CODE\s0 ,NEW_CODE [,CODESET] )\fR" 4
.IX Item "Locale::Script::add_script_code_alias    ( CODE ,NEW_CODE [,CODESET] )"
.PD
These routines add an alias for the code. At that point, \s-1NEW_CODE\s0 and \s-1CODE\s0
will both work in the code2XXX routines. However, the XXX2code routines will
still return the original code.
.IP "\fBLocale::Country::delete_country_code_alias  ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Country::delete_country_code_alias  ( CODE [,CODESET] )"
.PD 0
.IP "\fBLocale::Language::delete_language_code_alias( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Language::delete_language_code_alias( CODE [,CODESET] )"
.IP "\fBLocale::Currency::delete_currency_code_alias( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Currency::delete_currency_code_alias( CODE [,CODESET] )"
.IP "\fBLocale::Script::delete_script_code_alias    ( \s-1CODE\s0 [,CODESET] )\fR" 4
.IX Item "Locale::Script::delete_script_code_alias    ( CODE [,CODESET] )"
.PD
These routines delete an alias for the code.
.Sp
These will only work if \s-1CODE\s0 is actually an alias. If it is the \*(L"real\*(R"
code, it will not be deleted. You will need to use the rename_XXX_code
function to switch the real code with one of the aliases, and then
delete the alias.
.SH "KNOWN BUGS AND LIMITATIONS"
.IX Header "KNOWN BUGS AND LIMITATIONS"
.IP "\fB*\fR" 4
.IX Item "*"
Because each code set uses a slightly different list of elements, and
they are not necessarily one-to-one, there may be some confusion
about the relationship between codes from different code sets.
.Sp
For example, \s-1ISO\s0 3166 assigns one code to the country \*(L"United States
Minor Outlying Islands\*(R", but the \s-1FIPS\s0 10 codes give different codes
to different islands (Baker Island, Howland Island, etc.).
.Sp
This may cause some confusion... I've done the best that I could do
to minimize it.
.IP "\fB*\fR" 4
.IX Item "*"
Currently all names must be all \s-1ASCII\s0. I plan on relaxing that
limitation in the future.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\fBLocale::Constants\fR" 4
.IX Item "Locale::Constants"
Constants for Locale codes.
.IP "\fBLocale::Country\fR" 4
.IX Item "Locale::Country"
Codes for identification of countries.
.IP "\fBLocale::Language\fR" 4
.IX Item "Locale::Language"
Codes for identification of languages.
.IP "\fBLocale::Script\fR" 4
.IX Item "Locale::Script"
Codes for identification of scripts.
.IP "\fBLocale::Currency\fR" 4
.IX Item "Locale::Currency"
Codes for identification of currencies and funds.
.SH "AUTHOR"
.IX Header "AUTHOR"
Locale::Country and Locale::Language were originally written by Neil
Bowers at the Canon Research Centre Europe (\s-1CRE\s0). They maintained the
distribution from 1997 to 2001.
.PP
Locale::Currency was originally written by Michael Hennecke.
.PP
From 2001 to 2004, maintenance was continued by Neil Bowers.  He
modified Locale::Currency for inclusion in the distribution. He also
added Locale::Constants and Locale::Script.
.PP
From 2004\-2009, the module was unmaintained.
.PP
In 2010, maintenance was taken over by Sullivan Beck (sbeck@cpan.org)
with Neil Bower's permission.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 4
\&   Copyright (c) 1997\-2001 Canon Research Centre Europe (CRE).
\&   Copyright (c) 2001      Michael Hennecke (Locale::Currency)
\&   Copyright (c) 2001\-2010 Neil Bowers
\&   Copyright (c) 2010\-2011 Sullivan Beck
.Ve
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
