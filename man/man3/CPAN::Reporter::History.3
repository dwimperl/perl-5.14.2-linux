.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPAN::Reporter::History 3"
.TH CPAN::Reporter::History 3 "2011-08-11" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CPAN::Reporter::History \- Read or write a CPAN::Reporter history log
.SH "VERSION"
.IX Header "VERSION"
version 1.2002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&     use CPAN::Reporter::History \*(Aqhave_tested\*(Aq;
\& 
\&     @results = have_tested( dist => \*(AqDist\-Name\-1.23\*(Aq );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Interface for interacting with the CPAN::Reporter history file.  Most methods
are private for use only within CPAN::Reporter itself.  However, a public
function is provided to query the history file for results.
.SH "USAGE"
.IX Header "USAGE"
The following function is available.  It is not exported by default.
.ie n .SS """have_tested()"""
.el .SS "\f(CWhave_tested()\fP"
.IX Subsection "have_tested()"
.Vb 2
\&     # all reports for Foo\-Bar\-1.23
\&     @results = have_tested( dist => \*(AqFoo\-Bar\-1.23\*(Aq );
\& 
\&     # all NA reports
\&     @results = have_tested( grade => \*(AqNA\*(Aq );
\& 
\&     # all reports on the current Perl/platform
\&     @results = have_tested();
.Ve
.PP
Searches the CPAN::Reporter history file for records exactly matching search
criteria, given as pairs of field-names and desired values.
.PP
Ordinary search criteria include:
.IP "\(bu" 4
\&\f(CW\*(C`dist\*(C'\fR \*(-- the distribution tarball name without any filename suffix; from
a \f(CW\*(C`CPAN::Distribution\*(C'\fR object, this is provided by the \f(CW\*(C`base_id\*(C'\fR method.
.IP "\(bu" 4
\&\f(CW\*(C`phase\*(C'\fR \*(-- phase the report was generated during: either '\s-1PL\s0',
\&'make' or 'test'
.IP "\(bu" 4
\&\f(CW\*(C`grade\*(C'\fR \*(-- \s-1CPAN\s0 Testers grade: '\s-1PASS\s0', '\s-1FAIL\s0', '\s-1NA\s0' or'\s-1UNKNOWN\s0'; Also may
be '\s-1DISCARD\s0' for any failing reports not sent due to missing prerequisites
.PP
Without additional criteria, a search will be limited to the current
version of Perl and the current architecture and \s-1OS\s0 version.
Additional criteria may be specified explicitly or, by specifying the empty
string, \f(CW\*(C`q{}\*(C'\fR, will match that field for \fIany\fR record.
.PP
.Vb 3
\&     # all reports for Foo\-Bar\-1.23 on any version of perl
\&     # on the current architecture and OS version
\&     @results = have_tested( dist => \*(AqFoo\-Bar\-1.23\*(Aq, perl => q{} );
.Ve
.PP
These additional criteria include:
.IP "\(bu" 4
\&\f(CW\*(C`perl\*(C'\fR \*(-- perl version and possible patchlevel; this will be
dotted decimal (5.6.2) starting with version 5.6, or will be numeric style as
given by \f(CW$]\fR for older versions; if a patchlevel exists, it must be specified
similar to \*(L"5.11.0 patch 12345\*(R"
.IP "\(bu" 4
\&\f(CW\*(C`archname\*(C'\fR \*(-- platform architecture name as given by \f(CW$Config\fR{archname}
.IP "\(bu" 4
\&\f(CW\*(C`osvers\*(C'\fR \*(-- operating system version as given by \f(CW$Config\fR{osvers}
.PP
The function returns an array of hashes representing each test result, with
all of the fields listed above.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CPAN::Reporter
.IP "\(bu" 4
CPAN::Reporter::FAQ
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2006 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
